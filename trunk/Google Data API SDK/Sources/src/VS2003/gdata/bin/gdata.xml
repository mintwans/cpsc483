<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Google.GData.Client</name>
    </assembly>
    <members>
        <member name="T:Google.GData.Client.AtomEntryCollection">
            <summary>standard typed collection based on 1.1 framework for FeedEntries
            </summary> 
        </member>
        <member name="F:Google.GData.Client.AtomEntryCollection.feed">
            <summary>holds the owning feed</summary> 
        </member>
        <member name="M:Google.GData.Client.AtomEntryCollection.#ctor">
            <summary>private default constructor</summary> 
        </member>
        <member name="M:Google.GData.Client.AtomEntryCollection.#ctor(Google.GData.Client.AtomFeed)">
            <summary>constructor</summary> 
        </member>
        <member name="M:Google.GData.Client.AtomEntryCollection.FindById(Google.GData.Client.AtomId)">
            <summary>Fins an atomEntry in the collection 
            based on it's ID. </summary> 
            <param name="value">The atomId to look for</param> 
            <returns>Null if not found, otherwise the entry</returns>
        </member>
        <member name="M:Google.GData.Client.AtomEntryCollection.Add(Google.GData.Client.AtomEntry)">
            <summary>standard typed add method </summary> 
        </member>
        <member name="M:Google.GData.Client.AtomEntryCollection.IndexOf(Google.GData.Client.AtomEntry)">
            <summary>standard typed indexOf method </summary> 
        </member>
        <member name="M:Google.GData.Client.AtomEntryCollection.Insert(System.Int32,Google.GData.Client.AtomEntry)">
            <summary>standard typed insert method </summary> 
        </member>
        <member name="M:Google.GData.Client.AtomEntryCollection.Remove(Google.GData.Client.AtomEntry)">
            <summary>standard typed remove method </summary> 
        </member>
        <member name="M:Google.GData.Client.AtomEntryCollection.Contains(Google.GData.Client.AtomEntry)">
            <summary>standard typed Contains method </summary> 
        </member>
        <member name="M:Google.GData.Client.AtomEntryCollection.OnValidate(System.Object)">
            <summary>standard typed OnValidate Override </summary> 
        </member>
        <member name="P:Google.GData.Client.AtomEntryCollection.Item(System.Int32)">
            <summary>standard typed accessor method </summary> 
        </member>
        <member name="T:Google.GData.Client.AtomLinkCollection">
            <summary>standard typed collection based on 1.1 framework for AtomLinks
            </summary> 
        </member>
        <member name="M:Google.GData.Client.AtomLinkCollection.Add(Google.GData.Client.AtomLink)">
            <summary>standard typed accessor method </summary> 
        </member>
        <member name="M:Google.GData.Client.AtomLinkCollection.IndexOf(Google.GData.Client.AtomLink)">
            <summary>standard typed accessor method </summary> 
        </member>
        <member name="M:Google.GData.Client.AtomLinkCollection.Insert(System.Int32,Google.GData.Client.AtomLink)">
            <summary>standard typed accessor method </summary> 
        </member>
        <member name="M:Google.GData.Client.AtomLinkCollection.Remove(Google.GData.Client.AtomLink)">
            <summary>standard typed accessor method </summary> 
        </member>
        <member name="M:Google.GData.Client.AtomLinkCollection.Contains(Google.GData.Client.AtomLink)">
            <summary>standard typed accessor method </summary> 
        </member>
        <member name="M:Google.GData.Client.AtomLinkCollection.FindService(System.String,System.String)">
            <summary>public AtomLink FindService(string service,string type)
              Retrieves the first link with the supplied 'rel' and/or 'type' value.
              If either parameter is null, the corresponding match isn't needed.
            </summary> 
            <param name="service">the service entry to find</param>
            <param name="type">the link type to find</param>
            <returns>the found link or NULL </returns>
        </member>
        <member name="M:Google.GData.Client.AtomLinkCollection.OnValidate(System.Object)">
            <summary>standard typed accessor method </summary> 
        </member>
        <member name="P:Google.GData.Client.AtomLinkCollection.Item(System.Int32)">
            <summary>standard typed accessor method </summary> 
        </member>
        <member name="T:Google.GData.Client.AtomCategoryCollection">
            <summary>standard typed collection based on 1.1 framework for AtomCategory
            </summary> 
        </member>
        <member name="M:Google.GData.Client.AtomCategoryCollection.Add(Google.GData.Client.AtomCategory)">
            <summary>standard typed accessor method </summary> 
        </member>
        <member name="M:Google.GData.Client.AtomCategoryCollection.IndexOf(Google.GData.Client.AtomCategory)">
            <summary>standard typed accessor method </summary> 
        </member>
        <member name="M:Google.GData.Client.AtomCategoryCollection.Insert(System.Int32,Google.GData.Client.AtomCategory)">
            <summary>standard typed accessor method </summary> 
        </member>
        <member name="M:Google.GData.Client.AtomCategoryCollection.Remove(Google.GData.Client.AtomCategory)">
            <summary>standard typed accessor method </summary> 
        </member>
        <member name="M:Google.GData.Client.AtomCategoryCollection.Find(System.String)">
            <summary>
            finds the first category with this term
            ignoring schemes
            </summary>
            <param name="term">the category term to search for</param>
            <returns>AtomCategory</returns>
        </member>
        <member name="M:Google.GData.Client.AtomCategoryCollection.Find(System.String,Google.GData.Client.AtomUri)">
            <summary>
            finds a category with a given term and scheme
            </summary>
            <param name="term"></param>
            <param name="scheme"></param>
            <returns>AtomCategory or NULL</returns>
        </member>
        <member name="M:Google.GData.Client.AtomCategoryCollection.Contains(Google.GData.Client.AtomCategory)">
            <summary>standard typed accessor method </summary> 
        </member>
        <member name="M:Google.GData.Client.AtomCategoryCollection.OnValidate(System.Object)">
            <summary>standard typed accessor method </summary> 
        </member>
        <member name="P:Google.GData.Client.AtomCategoryCollection.Item(System.Int32)">
            <summary>standard typed accessor method </summary> 
        </member>
        <member name="T:Google.GData.Client.QueryCategoryCollection">
            <summary>standard typed collection based on 1.1 framework for AtomPerson
            </summary> 
        </member>
        <member name="M:Google.GData.Client.QueryCategoryCollection.Add(Google.GData.Client.QueryCategory)">
            <summary>standard typed accessor method </summary> 
        </member>
        <member name="M:Google.GData.Client.QueryCategoryCollection.IndexOf(Google.GData.Client.QueryCategory)">
            <summary>standard typed accessor method </summary> 
        </member>
        <member name="M:Google.GData.Client.QueryCategoryCollection.Insert(System.Int32,Google.GData.Client.QueryCategory)">
            <summary>standard typed accessor method </summary> 
        </member>
        <member name="M:Google.GData.Client.QueryCategoryCollection.Remove(Google.GData.Client.QueryCategory)">
            <summary>standard typed accessor method </summary> 
        </member>
        <member name="M:Google.GData.Client.QueryCategoryCollection.Contains(Google.GData.Client.QueryCategory)">
            <summary>standard typed accessor method </summary> 
        </member>
        <member name="M:Google.GData.Client.QueryCategoryCollection.OnValidate(System.Object)">
            <summary>standard typed accessor method </summary> 
        </member>
        <member name="P:Google.GData.Client.QueryCategoryCollection.Item(System.Int32)">
            <summary>standard typed accessor method </summary> 
        </member>
        <member name="T:Google.GData.Client.AtomPersonCollection">
            <summary>standard typed collection based on 1.1 framework for AtomPerson
            </summary> 
        </member>
        <member name="M:Google.GData.Client.AtomPersonCollection.Add(Google.GData.Client.AtomPerson)">
            <summary>standard typed accessor method </summary> 
        </member>
        <member name="M:Google.GData.Client.AtomPersonCollection.IndexOf(Google.GData.Client.AtomPerson)">
            <summary>standard typed accessor method </summary> 
        </member>
        <member name="M:Google.GData.Client.AtomPersonCollection.Insert(System.Int32,Google.GData.Client.AtomPerson)">
            <summary>standard typed accessor method </summary> 
        </member>
        <member name="M:Google.GData.Client.AtomPersonCollection.Remove(Google.GData.Client.AtomPerson)">
            <summary>standard typed accessor method </summary> 
        </member>
        <member name="M:Google.GData.Client.AtomPersonCollection.Contains(Google.GData.Client.AtomPerson)">
            <summary>standard typed accessor method </summary> 
        </member>
        <member name="M:Google.GData.Client.AtomPersonCollection.OnValidate(System.Object)">
            <summary>standard typed accessor method </summary> 
        </member>
        <member name="P:Google.GData.Client.AtomPersonCollection.Item(System.Int32)">
            <summary>standard typed accessor method </summary> 
        </member>
        <member name="T:Google.GData.Client.GDataBatchErrorCollection">
            <summary>standard typed collection based on 1.1 framework for BatchErrors
            </summary> 
        </member>
        <member name="M:Google.GData.Client.GDataBatchErrorCollection.Add(Google.GData.Client.GDataBatchError)">
            <summary>standard typed accessor method </summary> 
        </member>
        <member name="M:Google.GData.Client.GDataBatchErrorCollection.IndexOf(Google.GData.Client.GDataBatchError)">
            <summary>standard typed accessor method </summary> 
        </member>
        <member name="M:Google.GData.Client.GDataBatchErrorCollection.Insert(System.Int32,Google.GData.Client.GDataBatchError)">
            <summary>standard typed accessor method </summary> 
        </member>
        <member name="M:Google.GData.Client.GDataBatchErrorCollection.Remove(Google.GData.Client.GDataBatchError)">
            <summary>standard typed accessor method </summary> 
        </member>
        <member name="M:Google.GData.Client.GDataBatchErrorCollection.Contains(Google.GData.Client.GDataBatchError)">
            <summary>standard typed accessor method </summary> 
        </member>
        <member name="M:Google.GData.Client.GDataBatchErrorCollection.OnValidate(System.Object)">
            <summary>standard typed accessor method </summary> 
        </member>
        <member name="P:Google.GData.Client.GDataBatchErrorCollection.Item(System.Int32)">
            <summary>standard typed accessor method </summary> 
        </member>
        <member name="T:Google.GData.Client.AtomBaseLinkConverter">
            <summary>TypeConverter, so that AtomBaseLink shows up in the property pages
            </summary> 
        </member>
        <member name="M:Google.GData.Client.AtomBaseLinkConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>Standard type converter method</summary>
        </member>
        <member name="M:Google.GData.Client.AtomBaseLinkConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
             <summary>standard ConvertTo typeconverter code</summary> 
            <summary>Standard type converter method</summary>
        </member>
        <member name="T:Google.GData.Client.AtomBaseLink">
            <summary>AtomBaselink is an intermediate object that adds the URI property
            used as the parent class for a lot of other objects (like atomlink, atomicon, etc)
            </summary> 
        </member>
        <member name="T:Google.GData.Client.AtomBase">
            <summary>AtomBase object representation.
            </summary> 
        </member>
        <member name="T:Google.GData.Client.IExtensionContainer">
            <summary>interface for commone extension container functionallity
            used for AtomBase and SimpleContainer
            </summary> 
        </member>
        <member name="M:Google.GData.Client.IExtensionContainer.FindExtension(System.String,System.String)">
            <summary>
            Finds a specific ExtensionElement based on it's local name
            and it's namespace. If namespace is NULL, the first one where
            the localname matches is found. If there are extensionelements that do 
            not implment ExtensionElementFactory, they will not be taken into account
            </summary>
            <param name="localName">the xml local name of the element to find</param>
            <param name="ns">the namespace of the elementToPersist</param>
            <returns>Object</returns>
        </member>
        <member name="M:Google.GData.Client.IExtensionContainer.ReplaceExtension(System.String,System.String,System.Object)">
            <summary>
            all extension elements that match a namespace/localname
            given will be removed and the new one will be inserted
            </summary> 
            <param name="localName">the local name to find</param>
            <param name="ns">the namespace to match, if null, ns is ignored</param>
            <param name="obj">the new element to put in</param>
        </member>
        <member name="M:Google.GData.Client.IExtensionContainer.FindExtensions(System.String,System.String)">
            <summary>
            Finds all ExtensionElement based on it's local name
            and it's namespace. If namespace is NULL, allwhere
            the localname matches is found. If there are extensionelements that do 
            not implment ExtensionElementFactory, they will not be taken into account
            Primary use of this is to find XML nodes
            </summary>
            <param name="localName">the xml local name of the element to find</param>
            <param name="ns">the namespace of the elementToPersist</param>
            <returns>none</returns>
        </member>
        <member name="M:Google.GData.Client.IExtensionContainer.DeleteExtensions(System.String,System.String)">
            <summary>
            Delete's all Extensions from the Extension list that match
            a localName and a Namespace. 
            </summary>
            <param name="localName">the local name to find</param>
            <param name="ns">the namespace to match, if null, ns is ignored</param>
            <returns>int - the number of deleted extensions</returns>
        </member>
        <member name="P:Google.GData.Client.IExtensionContainer.ExtensionElements">
            <summary>the list of extensions for this container
            the elements in that list MUST implement IExtensionElementFactory 
            and IExtensionElement</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.IExtensionContainer.ExtensionFactories">
            <summary>the list of extensions for this container
            the elements in that list MUST implement IExtensionElementFactory 
            and IExtensionElement</summary> 
            <returns> </returns>
        </member>
        <member name="F:Google.GData.Client.AtomBase.uriBase">
            <summary>holds the base Uri</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomBase.uriImpliedBase">
            <summary>implied base, get's pushed down</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomBase.atomLanguageTag">
            <summary>holds the xml:lang element</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomBase.extensionsList">
            <summary>extension element collection</summary>
        </member>
        <member name="F:Google.GData.Client.AtomBase.extensionFactories">
            <summary> extension element factories </summary>
        </member>
        <member name="F:Google.GData.Client.AtomBase.fAllowRecalc">
            <summary>a boolean indicating that recalc is allowed to happen implicitly now</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomBase.fIsDirty">
            <summary>holds a flag indicating if the thing should be send to the server</summary> 
        </member>
        <member name="M:Google.GData.Client.AtomBase.MarkElementDirty(System.Boolean)">
            <summary>sets the element and all subelemts dirty flag</summary> 
            <param name="fFlag">indicates the property value to set</param>
            <returns> </returns>
        </member>
        <member name="M:Google.GData.Client.AtomBase.IsPersistable">
            <summary>checks if the element or one subelement are persistable</summary> 
        </member>
        <member name="M:Google.GData.Client.AtomBase.IsDirty">
            <summary>returns if the element or one subelement is dirty</summary> 
        </member>
        <member name="M:Google.GData.Client.AtomBase.GetAbsoluteUri(System.String)">
            <summary>Read only accessor for AbsoluteUri. This is pushed down
            whenever a base changes.</summary> 
        </member>
        <member name="M:Google.GData.Client.AtomBase.BaseUriChanged(Google.GData.Client.AtomUri)">
            <summary>This starts the calculation, to push down the base
            URI changes.</summary> 
            <param name="uriValue">the baseuri calculated so far</param>
        </member>
        <member name="M:Google.GData.Client.AtomBase.AddExtension(System.Object)">
            <summary>
            adding an extension factory for extension elements
            </summary>
            <param name="factory">The factory</param>
        </member>
        <member name="M:Google.GData.Client.AtomBase.WalkTree(Google.GData.Client.IBaseWalkerAction)">
            <summary>Calls the action on this object and all children.</summary> 
            <param name="action">an IBaseWalkerAction interface to call </param>
            <returns>true or false, pending outcome of the passed in action</returns>
        </member>
        <member name="M:Google.GData.Client.AtomBase.FindExtension(System.String,System.String)">
            <summary>
            Finds a specific ExtensionElement based on it's local name
            and it's namespace. If namespace is NULL, the first one where
            the localname matches is found. If there are extensionelements that do 
            not implment ExtensionElementFactory, they will not be taken into account
            Primary use of this is to find XML nodes
            </summary>
            <param name="localName">the xml local name of the element to find</param>
            <param name="ns">the namespace of the elementToPersist</param>
            <returns>Object</returns>
        </member>
        <member name="M:Google.GData.Client.AtomBase.CreateExtension(System.String,System.String)">
            <summary>
            Creates an extension for a given name and namespace by walking the
            extension factories list and calling CreateInstance for the right one
            </summary>
            <param name="localName">the xml local name of the element to find</param>
            <param name="ns">the namespace of the elementToPersist</param>
            <returns>Object</returns>
        </member>
        <member name="M:Google.GData.Client.AtomBase.FindExtensionFactory(System.String,System.String)">
            <summary>
            Finds the extension factory for a given name/namespace
            </summary>
            <param name="localName">the xml local name of the element to find</param>
            <param name="ns">the namespace of the elementToPersist</param>
            <returns>Object</returns>
        </member>
        <member name="M:Google.GData.Client.AtomBase.FindExtensions(System.String,System.String)">
            <summary>
            Finds all ExtensionElement based on it's local name
            and it's namespace. If namespace is NULL, allwhere
            the localname matches is found. If there are extensionelements that do 
            not implment ExtensionElementFactory, they will not be taken into account
            Primary use of this is to find XML nodes
            </summary>
            <param name="localName">the xml local name of the element to find</param>
            <param name="ns">the namespace of the elementToPersist</param>
            <returns>Object</returns>
        </member>
        <member name="M:Google.GData.Client.AtomBase.FindExtensions(System.String,System.String,System.Collections.ArrayList)">
            <summary>
            Finds all ExtensionElement based on it's local name
            and it's namespace. If namespace is NULL, allwhere
            the localname matches is found. If there are extensionelements that do 
            not implment ExtensionElementFactory, they will not be taken into account
            Primary use of this is to find XML nodes
            </summary>
            <param name="localName">the xml local name of the element to find</param>
            <param name="ns">the namespace of the elementToPersist</param>
            <param name="arr">the array to fill</param>
            <returns>none</returns>
        </member>
        <member name="M:Google.GData.Client.AtomBase.DeleteExtensions(System.String,System.String)">
            <summary>
            Delete's all Extensions from the Extension list that match
            a localName and a Namespace. 
            </summary>
            <param name="localName">the local name to find</param>
            <param name="ns">the namespace to match, if null, ns is ignored</param>
            <returns>int - the number of deleted extensions</returns>
        </member>
        <member name="M:Google.GData.Client.AtomBase.ReplaceExtensions(System.Collections.ArrayList)">
            <summary>
            all extension elements that match a namespace/localname
            given will be removed and replaced with the new ones.
            the input array can contain several different
            namespace/localname combinations
            if the passed list is NULL or empty, this will just result
            in additions
            </summary>
            <param name="newList">a list of xmlnodes or IExtensionElementFactory objects</param>
            <returns>int - the number of deleted extensions</returns>
        </member>
        <member name="M:Google.GData.Client.AtomBase.ReplaceExtension(System.String,System.String,System.Object)">
            <summary>
            all extension elements that match a namespace/localname
            given will be removed and the new one will be inserted
            </summary> 
            <param name="localName">the local name to find</param>
            <param name="ns">the namespace to match, if null, ns is ignored</param>
            <param name="obj">the new element to put in</param>
        </member>
        <member name="M:Google.GData.Client.AtomBase.CreateAtomSubElement(System.Xml.XmlReader,Google.GData.Client.AtomFeedParser)">
            <summary>
            this is the subclassing method for AtomBase derived 
            classes to overload what childelements should be created
            needed to create CustomLink type objects, like WebContentLink etc
            </summary>
            <param name="reader">The XmlReader that tells us what we are working with</param>
            <param name="parser">the parser is primarily used for nametable comparisons</param>
            <returns>AtomBase</returns>
        </member>
        <member name="M:Google.GData.Client.AtomBase.SaveToXml(System.IO.Stream)">
            <summary>Saves the object as XML.</summary> 
            <param name="stream">stream to save to</param>
            <returns>how many bytes written</returns>
        </member>
        <member name="M:Google.GData.Client.AtomBase.SaveToXml(System.Xml.XmlWriter)">
            <summary>saves the object as XML</summary> 
            <param name="writer">the xmlwriter to save to</param>
        </member>
        <member name="M:Google.GData.Client.AtomBase.SaveXmlAttributes(System.Xml.XmlWriter)">
            <summary>protected virtual int SaveXmlAttributes(XmlWriter writer)</summary> 
            <param name="writer">the XmlWriter to save to</param>
        </member>
        <member name="M:Google.GData.Client.AtomBase.SkipNode(System.Xml.XmlNode)">
            <summary>checks if this is a namespace 
            decl that we already added</summary> 
            <param name="node">XmlNode to check</param>
            <returns>true if this node should be skipped </returns>
        </member>
        <member name="M:Google.GData.Client.AtomBase.WriteElementStart(System.Xml.XmlWriter,System.String)">
            <summary>protected WriteElementStart(XmlWriter writer)</summary> 
            <param name="writer"> the xmlwriter to use</param>
            <param name="elementName"> the elementToPersist to use</param>
        </member>
        <member name="M:Google.GData.Client.AtomBase.AddOtherNamespaces(System.Xml.XmlWriter)">
            <summary>empty base implementation</summary> 
            <param name="writer">the xmlwriter, where we want to add default namespaces to</param>
        </member>
        <member name="M:Google.GData.Client.AtomBase.WriteLocalDateTimeElement(System.Xml.XmlWriter,System.String,System.DateTime)">
            <summary>Writes out a LOCAL datetime in ISO 8601 format.
            </summary> 
            <param name="writer"> the xmlwriter to use</param>
            <param name="elementName"> the elementToPersist to use</param>
            <param name="dateTime"> the localDateTime to convert and persist</param>
        </member>
        <member name="M:Google.GData.Client.AtomBase.SaveInnerXml(System.Xml.XmlWriter)">
            <summary>empty base implementation</summary> 
            <param name="writer">the xmlwriter to save to</param>
        </member>
        <member name="M:Google.GData.Client.AtomBase.WriteEncodedString(System.Xml.XmlWriter,System.String)">
            <summary>helper method to encapsulate a string encoding, uses HTML encoding now</summary> 
            <param name="writer">the xml writer to write to</param> 
            <param name="content">the string to encode</param>
        </member>
        <member name="M:Google.GData.Client.AtomBase.WriteEncodedString(System.Xml.XmlWriter,Google.GData.Client.AtomUri)">
            <summary>helper method to encapsulate a string encoding, uses HTML encoding now</summary>
            <param name="writer">the xml writer to write to</param> 
            <param name="content">the string to encode</param>
        </member>
        <member name="M:Google.GData.Client.AtomBase.WriteEncodedAttributeString(System.Xml.XmlWriter,System.String,Google.GData.Client.AtomUri)">
            <summary>helper method to encapsulate encoding, uses HTML encoding now</summary> 
            <param name="writer">the xml writer to write to</param>
            <param name="attributeName">the attribute the write</param>
            <param name="content">the atomUri to encode</param>
        </member>
        <member name="M:Google.GData.Client.AtomBase.WriteEncodedAttributeString(System.Xml.XmlWriter,System.String,System.String)">
            <summary>helper method to encapsulate encoding, uses HTML encoding now</summary> 
            <param name="writer">the xml writer to write to</param>
            <param name="attributeName">the attribute the write</param>
            <param name="content">the string to encode</param>
        </member>
        <member name="M:Google.GData.Client.AtomBase.WriteEncodedElementString(System.Xml.XmlWriter,System.String,System.String)">
            <summary>helper method to encapsulate encoding, uses HTML encoding now</summary> 
            <param name="writer">the xml writer to write to</param>
            <param name="elementName">the attribute the write</param>
            <param name="content">the string to encode</param>
        </member>
        <member name="M:Google.GData.Client.AtomBase.WriteEncodedElementString(System.Xml.XmlWriter,System.String,Google.GData.Client.AtomUri)">
            <summary>helper method to encapsulate encoding, uses HTML encoding now</summary> 
            <param name="writer">the xml writer to write to</param>
            <param name="elementName">the attribute the write</param>
            <param name="content">the string to encode</param>
        </member>
        <member name="M:Google.GData.Client.AtomBase.ShouldBePersisted">
            <summary>Method to check whether object should be saved.
            This doesn't check whether the object is dirty; it only
            checks whether the XML content is worth saving.
            </summary> 
        </member>
        <member name="P:Google.GData.Client.AtomBase.Dirty">
            <summary>The dirty property - indicates if exactly this element is dirty</summary> 
            <returns>returns true or false</returns>
        </member>
        <member name="P:Google.GData.Client.AtomBase.ImpliedBase">
            <summary>property that holds the implied base URI</summary> 
            <returns> the implied base URI as an AtomUri</returns>
        </member>
        <member name="P:Google.GData.Client.AtomBase.XmlName">
            <summary>Returns the XML name as string used for the element when persisting.</summary> 
        </member>
        <member name="P:Google.GData.Client.AtomBase.Base">
            <summary>calculates or set's the base uri of an element</summary> 
            <returns>an AtomUri for the Base URI when get is called</returns>
        </member>
        <member name="P:Google.GData.Client.AtomBase.Language">
            <summary>accessor method public string Language</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.AtomBase.ExtensionFactories">
            <summary>
            read only accessor for the Extension Factories
            </summary>
        </member>
        <member name="P:Google.GData.Client.AtomBase.ExtensionElements">
            <summary>read only accessor for the ExtensionsElements Collections</summary> 
            <returns> an ArrayList of ExtensionElements</returns>
        </member>
        <member name="F:Google.GData.Client.AtomBaseLink.uriString">
            <summary>holds the string rep</summary> 
        </member>
        <member name="M:Google.GData.Client.AtomBaseLink.SaveInnerXml(System.Xml.XmlWriter)">
            <summary>saves the inner state of the element</summary> 
            <param name="writer">the xmlWriter to save into </param>
        </member>
        <member name="M:Google.GData.Client.AtomBaseLink.ShouldBePersisted">
            <summary>figures out if this object should be persisted</summary> 
            <returns> true, if it's worth saving</returns>
        </member>
        <member name="P:Google.GData.Client.AtomBaseLink.Uri">
            <summary>accessor method public string Uri</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.AtomBaseLink.AbsoluteUri">
            <summary>public Uri AbsoluteUri</summary> 
        </member>
        <member name="T:Google.GData.Client.LoggedException">
            <summary>standard exception class to be used inside the query object
            </summary> 
        </member>
        <member name="M:Google.GData.Client.LoggedException.#ctor">
            <summary>default constructor so that FxCop does not complain</summary> 
        </member>
        <member name="M:Google.GData.Client.LoggedException.#ctor(System.String)">
            <summary>standard overloaded constructor</summary> 
            <param name="msg">msg for the exception</param>
        </member>
        <member name="M:Google.GData.Client.LoggedException.#ctor(System.String,System.Exception)">
            <summary>standard overloaded constructor</summary> 
            <param name="msg">msg for the exception</param>
            <param name="exception">inner exception</param>
        </member>
        <member name="M:Google.GData.Client.LoggedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>here to please FxCop and maybe for future use</summary> 
        </member>
        <member name="M:Google.GData.Client.LoggedException.EnsureLogging">
            <summary>protected void EnsureLogging()</summary> 
        </member>
        <member name="T:Google.GData.Client.ClientQueryException">
            <summary>standard exception class to be used inside the query object
            </summary> 
        </member>
        <member name="M:Google.GData.Client.ClientQueryException.#ctor">
            <summary>default constructor so that FxCop does not complain</summary> 
        </member>
        <member name="M:Google.GData.Client.ClientQueryException.#ctor(System.String)">
            <summary>standard overloaded constructor</summary> 
            <param name="msg">msg for the exception</param>
        </member>
        <member name="M:Google.GData.Client.ClientQueryException.#ctor(System.String,System.Exception)">
            <summary>here to please FxCop and for future use</summary> 
        </member>
        <member name="M:Google.GData.Client.ClientQueryException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>here to please FxCop and maybe for future use</summary> 
        </member>
        <member name="T:Google.GData.Client.ClientFeedException">
            <summary>standard exception class to be used inside the feed object
            </summary> 
        </member>
        <member name="M:Google.GData.Client.ClientFeedException.#ctor">
            <summary>default constructor so that FxCop does not complain</summary> 
        </member>
        <member name="M:Google.GData.Client.ClientFeedException.#ctor(System.String)">
            <summary>standard overloaded constructor</summary> 
            <param name="msg">msg for the exception</param>
        </member>
        <member name="M:Google.GData.Client.ClientFeedException.#ctor(System.String,System.Exception)">
            <summary>here to please FxCop and for future use</summary> 
        </member>
        <member name="M:Google.GData.Client.ClientFeedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>here to please FxCop and maybe for future use</summary> 
        </member>
        <member name="T:Google.GData.Client.GDataBatchRequestException">
            <summary>standard exception class to be used inside the feed object
            </summary> 
        </member>
        <member name="M:Google.GData.Client.GDataBatchRequestException.#ctor">
            <summary>standard overloaded constructor</summary> 
        </member>
        <member name="M:Google.GData.Client.GDataBatchRequestException.#ctor(Google.GData.Client.AtomFeed)">
            <summary>default constructor so that FxCop does not complain</summary> 
        </member>
        <member name="M:Google.GData.Client.GDataBatchRequestException.#ctor(System.String)">
            <summary>standard overloaded constructor</summary> 
            <param name="msg">msg for the exception</param>
        </member>
        <member name="M:Google.GData.Client.GDataBatchRequestException.#ctor(System.String,System.Exception)">
            <summary>here to please FxCop and for future use</summary> 
        </member>
        <member name="M:Google.GData.Client.GDataBatchRequestException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>here to please FxCop and maybe for future use</summary> 
        </member>
        <member name="P:Google.GData.Client.GDataBatchRequestException.BatchResult">
            <summary>
            Returns the BatchResult Feed that contains the problem
            </summary>
        </member>
        <member name="T:Google.GData.Client.GDataRequestException">
            <summary>standard exception class to be used inside GDataRequest
            </summary> 
        </member>
        <member name="F:Google.GData.Client.GDataRequestException.webResponse">
            <summary>holds the webresponse object</summary> 
        </member>
        <member name="F:Google.GData.Client.GDataRequestException.responseText">
            <summary>cache to hold the responseText in an error scenario</summary>
        </member>
        <member name="M:Google.GData.Client.GDataRequestException.#ctor">
            <summary>default constructor so that FxCop does not complain</summary> 
        </member>
        <member name="M:Google.GData.Client.GDataRequestException.ReadResponseString">
            <summary>
            this uses the webresponse object to get at the
            stream send back from the server.
            </summary>
            <returns>the error message</returns>
        </member>
        <member name="M:Google.GData.Client.GDataRequestException.#ctor(System.String,System.Exception)">
            <summary>public GDataRequestException(WebException e)</summary> 
            <param name="msg"> the exception message as a string</param>
            <param name="exception"> the inner exception</param>
        </member>
        <member name="M:Google.GData.Client.GDataRequestException.#ctor(System.String)">
            <summary>public GDataRequestException(WebException e)</summary> 
            <param name="msg"> the exception message as a string</param>
        </member>
        <member name="M:Google.GData.Client.GDataRequestException.#ctor(System.String,System.Net.WebException)">
            <summary>public GDataRequestException(WebException e)</summary> 
            <param name="msg"> the exception message as a string</param>
            <param name="exception"> the inner exception</param>
        </member>
        <member name="M:Google.GData.Client.GDataRequestException.#ctor(System.String,System.Net.WebResponse)">
            <summary>public GDataRequestException(WebException e)</summary> 
            <param name="msg"> the exception message as a string</param>
            <param name="response"> the webresponse object that caused the exception</param>
        </member>
        <member name="M:Google.GData.Client.GDataRequestException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>here to please FxCop and maybe for future use</summary> 
        </member>
        <member name="M:Google.GData.Client.GDataRequestException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>overridden to make FxCop happy and future use</summary> 
        </member>
        <member name="P:Google.GData.Client.GDataRequestException.Response">
            <summary>Read only accessor for response</summary> 
        </member>
        <member name="P:Google.GData.Client.GDataRequestException.ResponseString">
            <summary>
            this is the error message returned by the server
            </summary>
        </member>
        <member name="T:Google.GData.Client.GDataForbiddenException">
            <summary>exception class thrown when we encounter an access denied
            (HttpSTatusCode.Forbidden) when accessing a server
            </summary> 
        </member>
        <member name="M:Google.GData.Client.GDataForbiddenException.#ctor(System.String,System.Net.WebResponse)">
            <summary>constructs a forbidden exception</summary> 
            <param name="msg"> the exception message as a string</param>
            <param name="response"> the webresponse object that caused the exception</param>
        </member>
        <member name="T:Google.GData.Client.GDataRedirectException">
            <summary>exception class thrown when we encounter a redirect
            (302 and 307) when accessing a server
            </summary> 
        </member>
        <member name="M:Google.GData.Client.GDataRedirectException.#ctor(System.String,System.Net.WebResponse)">
            <summary>constructs a redirect execption</summary> 
            <param name="msg"> the exception message as a string</param>
            <param name="response"> the webresponse object that caused the exception</param>
        </member>
        <member name="P:Google.GData.Client.GDataRedirectException.Location">
            <summary>
            returns the location header of the webresponse object
            which should be the location we should redirect to
            </summary>
        </member>
        <member name="T:Google.GData.Client.IService">
            <summary>base Service interface definition
            </summary> 
        </member>
        <member name="M:Google.GData.Client.IService.QueryOpenSearchRssDescription(System.Uri)">
            <summary>the minimal Get OpenSearchRssDescription function</summary> 
        </member>
        <member name="M:Google.GData.Client.IService.Query(Google.GData.Client.FeedQuery)">
            <summary>the minimal query implementation</summary> 
        </member>
        <member name="M:Google.GData.Client.IService.Update(Google.GData.Client.AtomEntry)">
            <summary>simple update for atom resources</summary> 
        </member>
        <member name="M:Google.GData.Client.IService.Insert(Google.GData.Client.AtomFeed,Google.GData.Client.AtomEntry)">
            <summary>simple insert for atom entries, based on a feed</summary> 
        </member>
        <member name="M:Google.GData.Client.IService.Delete(Google.GData.Client.AtomEntry)">
            <summary>delete an entry</summary> 
        </member>
        <member name="M:Google.GData.Client.IService.Delete(System.Uri)">
            <summary>delete an entry</summary> 
        </member>
        <member name="M:Google.GData.Client.IService.Batch(Google.GData.Client.AtomFeed,System.Uri)">
            <summary>batch operation, posting of a set of entries</summary>
        </member>
        <member name="M:Google.GData.Client.IService.Update(System.Uri,System.IO.Stream,System.String,System.String)">
            <summary>simple update for media resources</summary> 
        </member>
        <member name="M:Google.GData.Client.IService.Insert(System.Uri,System.IO.Stream,System.String,System.String)">
            <summary>simple insert for media resources</summary> 
        </member>
        <member name="P:Google.GData.Client.IService.Credentials">
            <summary>get/set for credentials to the service calls. Gets passed through to GDatarequest</summary> 
        </member>
        <member name="P:Google.GData.Client.IService.RequestFactory">
            <summary>get/set for the GDataRequestFactory object to use</summary> 
        </member>
        <member name="T:Google.GData.Client.IGDataRequestFactory">
            <summary>the one that creates GDatarequests on the service
            </summary> 
        </member>
        <member name="M:Google.GData.Client.IGDataRequestFactory.CreateRequest(Google.GData.Client.GDataRequestType,System.Uri)">
            <summary>creation method for GDatarequests</summary> 
        </member>
        <member name="P:Google.GData.Client.IGDataRequestFactory.UseGZip">
            <summary>set wether or not to use gzip for new requests</summary>
        </member>
        <member name="T:Google.GData.Client.GDataRequestType">
            <summary>enum to describe the different operations on the GDataRequest
            </summary> 
        </member>
        <member name="F:Google.GData.Client.GDataRequestType.Query">
            <summary>The request is used for query</summary>
        </member>
        <member name="F:Google.GData.Client.GDataRequestType.Insert">
            <summary>The request is used for an insert</summary>
        </member>
        <member name="F:Google.GData.Client.GDataRequestType.Update">
            <summary>The request is used for an update</summary>
        </member>
        <member name="F:Google.GData.Client.GDataRequestType.Delete">
            <summary>The request is used for a delete</summary>
        </member>
        <member name="F:Google.GData.Client.GDataRequestType.Batch">
            <summary>This request is used for a batch operation</summary>
        </member>
        <member name="T:Google.GData.Client.IGDataRequest">
            <summary>Thin layer to abstract the request/response
            </summary> 
        </member>
        <member name="M:Google.GData.Client.IGDataRequest.GetRequestStream">
            <summary>get's the request stream to write into</summary> 
        </member>
        <member name="M:Google.GData.Client.IGDataRequest.Execute">
            <summary>Executes the request</summary> 
        </member>
        <member name="M:Google.GData.Client.IGDataRequest.GetResponseStream">
            <summary>get's the response stream to read from</summary> 
        </member>
        <member name="P:Google.GData.Client.IGDataRequest.Credentials">
            <summary>get/set for credentials to the service calls. Get's passed through to GDatarequest</summary> 
        </member>
        <member name="P:Google.GData.Client.IGDataRequest.UseGZip">
            <summary>set wether or not to use gzip for this request</summary>
        </member>
        <member name="T:Google.GData.Client.IBaseWalkerAction">
            <summary>Thin layer to create an action on an item/response
            </summary> 
        </member>
        <member name="M:Google.GData.Client.IBaseWalkerAction.Go(Google.GData.Client.AtomBase)">
            <summary>the only relevant method here</summary> 
        </member>
        <member name="T:Google.GData.Client.IExtensionElement">
            <summary>if an extension element is created and wants to persist itself,
            it needs to implement this interface
            </summary> 
        </member>
        <member name="M:Google.GData.Client.IExtensionElement.Save(System.Xml.XmlWriter)">
            <summary>the only relevant method here</summary> 
        </member>
        <member name="T:Google.GData.Client.IExtensionElementFactory">
            <summary>if an extension element want's to use the new parsing method
            it needs to implement this interface
            </summary> 
        </member>
        <member name="M:Google.GData.Client.IExtensionElementFactory.CreateInstance(System.Xml.XmlNode,Google.GData.Client.AtomFeedParser)">
            <summary>
            instantiates the correct extensiohn element
            </summary>
            <param name="node">the xmlnode to parse</param>
            <param name="parser">the atomfeedparser to use if deep parsing of subelements is required</param>
            <returns></returns>
        </member>
        <member name="P:Google.GData.Client.IExtensionElementFactory.XmlName">
            <summary>
            returns the XML local name that is used
            </summary>
        </member>
        <member name="P:Google.GData.Client.IExtensionElementFactory.XmlNameSpace">
            <summary>
            returns the XML namespace that is processed
            </summary>
        </member>
        <member name="P:Google.GData.Client.IExtensionElementFactory.XmlPrefix">
            <summary>
            returns the xml prefix used 
            </summary>
        </member>
        <member name="T:Google.GData.Client.RssFeedParser">
            <summary>RssFeedParser
            </summary> 
        </member>
        <member name="T:Google.GData.Client.BaseFeedParser">
            <summary>AtomEntry object, representing an item in the RSS feed
            </summary> 
        </member>
        <member name="F:Google.GData.Client.BaseFeedParser.doc">
            <summary>the XmlDoc that we use to hand nodes to, in case of extensions</summary> 
        </member>
        <member name="M:Google.GData.Client.BaseFeedParser.Parse(System.IO.Stream,Google.GData.Client.AtomFeed)">
            <summary>virtual, starts the parsing process</summary> 
            <param name="streamInput">input stream to parse </param>
            <param name="feed">the basefeed object that should be set</param>
        </member>
        <member name="M:Google.GData.Client.BaseFeedParser.OnCreateNewEntry">
            <summary>overloaded to make it easier to fire the event</summary> 
        </member>
        <member name="M:Google.GData.Client.BaseFeedParser.OnNewAtomEntry(Google.GData.Client.AtomEntry)">
            <summary>overloaded to make it easier to fire the event</summary> 
            <param name="newEntry">the new AtomEntry to fire </param>
        </member>
        <member name="M:Google.GData.Client.BaseFeedParser.OnParsingDone">
            <summary>protected void OnParsingDone()</summary> 
            <returns> </returns>
        </member>
        <member name="M:Google.GData.Client.BaseFeedParser.OnNewAtomEntry(Google.GData.Client.AtomFeed)">
            <summary>overloaded to make eventfiring easier</summary> 
            <param name="feed"> the new feed to fire</param>
        </member>
        <member name="M:Google.GData.Client.BaseFeedParser.OnNewExtensionElement(System.Xml.XmlNode,Google.GData.Client.AtomBase)">
            <summary>eventfiring helper for new extensions</summary> 
            <param name="node"> the new node that was found</param>
            <param name="baseObject"> the object this node should be added to</param>
        </member>
        <member name="M:Google.GData.Client.BaseFeedParser.OnNewExtensionElement(System.Xml.XmlReader,Google.GData.Client.AtomBase)">
            <summary>eventfiring helper for new extensions</summary> 
            <param name="reader"> the reader positioned on the extension</param>
            <param name="baseObject"> the object this node should be added to</param>
        </member>
        <member name="M:Google.GData.Client.BaseFeedParser.OnNewAtomEntry(Google.GData.Client.FeedParserEventArgs)">
            <summary>protected virtual OnNewAtomEntry( FeedParserEventArgs args)</summary> 
            <param name="args"> FeedParserEventArgs, includes the new entry</param>
            <returns> </returns>
        </member>
        <member name="M:Google.GData.Client.BaseFeedParser.NextElement(System.Xml.XmlReader)">
            <summary>moves to the next element</summary> 
            <param name="reader">the xmlreader to skip </param>
        </member>
        <member name="M:Google.GData.Client.BaseFeedParser.NextChildElement(System.Xml.XmlReader,System.Int32@)">
            <summary>starts with the parent element, and stops when it reaches the same DEPTH again</summary> 
            <param name="reader"> the xml reader positioned at the parent element</param>
            <param name="depth"> indicates the depth level of the parent where to stop</param>
            <returns> true while still inside this level</returns>
        </member>
        <member name="M:Google.GData.Client.BaseFeedParser.MoveToStartElement(System.Xml.XmlReader)">
            <summary>moves to the next element start</summary> 
            <param name="reader"> the xml reader positioned somewhere</param>
            <returns> true if found, otherwise false (indicating most likely EOF</returns>
        </member>
        <member name="E:Google.GData.Client.BaseFeedParser.NewAtomEntry">
            <summary>eventhandler, when the parser created a new feed entry</summary> 
        </member>
        <member name="E:Google.GData.Client.BaseFeedParser.NewExtensionElement">
            <summary>eventhandler, when the parser finds an extension element</summary> 
        </member>
        <member name="P:Google.GData.Client.BaseFeedParser.Document">
            <summary>Read only accessor for doc</summary> 
        </member>
        <member name="M:Google.GData.Client.RssFeedParser.#ctor">
            <summary>standard empty constructor</summary> 
        </member>
        <member name="M:Google.GData.Client.RssFeedParser.Parse(System.IO.Stream,Google.GData.Client.AtomFeed)">
            <summary>starts the parsing process</summary> 
            <param name="streamInput">input stream to parse </param>
            <param name="feed">the feed object to construct</param>
        </member>
        <member name="T:Google.GData.Client.GDataBatchOperationType">
            <summary>enum to define the GDataBatchOperationType...</summary> 
        </member>
        <member name="F:Google.GData.Client.GDataBatchOperationType.insert">
            <summary>this is an insert operatoin</summary> 
        </member>
        <member name="F:Google.GData.Client.GDataBatchOperationType.update">
            <summary>this is an update operation</summary> 
        </member>
        <member name="F:Google.GData.Client.GDataBatchOperationType.delete">
            <summary>this is a delete operation</summary> 
        </member>
        <member name="F:Google.GData.Client.GDataBatchOperationType.query">
            <summary>this is a query operation</summary>
        </member>
        <member name="F:Google.GData.Client.GDataBatchOperationType.Default">
            <summary>the default (a no-op)</summary>
        </member>
        <member name="T:Google.GData.Client.GDataBatchStatus">
            <summary>
            holds the batch status information
            </summary>
        </member>
        <member name="F:Google.GData.Client.GDataBatchStatus.CodeDefault">
            <summary>default value for the status code</summary>
        </member>
        <member name="M:Google.GData.Client.GDataBatchStatus.#ctor">
            <summary>
            set's the defaults for code
            </summary>
        </member>
        <member name="M:Google.GData.Client.GDataBatchStatus.Save(System.Xml.XmlWriter)">
            <summary>
            Persistence method for the GDataBatchStatus object
            </summary>
            <param name="writer">the xmlwriter to write into</param>
        </member>
        <member name="P:Google.GData.Client.GDataBatchStatus.Code">
            <summary>returns the status code of the operation</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.GDataBatchStatus.Reason">
            <summary>accessor method public string Reason</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.GDataBatchStatus.ContentType">
            <summary>accessor method public string ContentType</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.GDataBatchStatus.Value">
            <summary>accessor method public string Value</summary> 
            <returns> </returns>
        </member>
        <member name="T:Google.GData.Client.GDataBatchError">
            <summary>
             represents the Error element in the GDataBatch response
            </summary>
        </member>
        <member name="M:Google.GData.Client.GDataBatchError.Save(System.Xml.XmlWriter)">
            <summary>
            Persistence method for the GDataBatchError object
            </summary>
            <param name="writer">the xmlwriter to write into</param>
        </member>
        <member name="P:Google.GData.Client.GDataBatchError.Type">
            <summary>accessor method Type</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.GDataBatchError.Field">
            <summary>accessor method public string Field</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.GDataBatchError.Reason">
            <summary>accessor method public string Reason</summary> 
            <returns> </returns>
        </member>
        <member name="T:Google.GData.Client.GDataBatchInterrupt">
            <summary>
            holds the batch status information
            </summary>
        </member>
        <member name="M:Google.GData.Client.GDataBatchInterrupt.Save(System.Xml.XmlWriter)">
            <summary>
            Persistence method for the GDataBatchInterrupt object
            </summary>
            <param name="writer">the xmlwriter to write into</param>
        </member>
        <member name="P:Google.GData.Client.GDataBatchInterrupt.Reason">
            <summary>accessor method public string Reason</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.GDataBatchInterrupt.Successes">
            <summary>accessor method public int Successes</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.GDataBatchInterrupt.Failures">
            <summary>accessor method public int Failures</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.GDataBatchInterrupt.Unprocessed">
            <summary>accessor method public int Unprocessed</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.GDataBatchInterrupt.Parsed">
            <summary>accessor method public int Parsed</summary> 
            <returns> </returns>
        </member>
        <member name="T:Google.GData.Client.GDataBatchFeedData">
            <summary>The GDataFeedBatch object holds batch related information
            for the AtomFeed
            </summary> 
        </member>
        <member name="M:Google.GData.Client.GDataBatchFeedData.#ctor">
            <summary>
            constructor, set's the default for the operation type
            </summary>
        </member>
        <member name="M:Google.GData.Client.GDataBatchFeedData.Save(System.Xml.XmlWriter)">
            <summary>
            Persistence method for the GDataBatch object
            </summary>
            <param name="writer">the xmlwriter to write into</param>
        </member>
        <member name="P:Google.GData.Client.GDataBatchFeedData.Type">
            <summary>accessor method public GDataBatchOperationType Type</summary> 
            <returns> </returns>
        </member>
        <member name="T:Google.GData.Client.GDataBatchEntryData">
            <summary>The GDataEntryBatch object holds batch related information\
            for an AtomEntry
            </summary> 
        </member>
        <member name="M:Google.GData.Client.GDataBatchEntryData.#ctor">
            <summary>
            constructor, sets the default for the operation type
            </summary>
        </member>
        <member name="M:Google.GData.Client.GDataBatchEntryData.#ctor(Google.GData.Client.GDataBatchOperationType)">
            <summary>
            Constructor for the batch data
            </summary>
            <param name="type">The batch operation to be performed</param>
        </member>
        <member name="M:Google.GData.Client.GDataBatchEntryData.#ctor(System.String,Google.GData.Client.GDataBatchOperationType)">
            <summary>
            Constructor for batch data
            </summary>
            <param name="ID">The batch ID of this entry</param>
            <param name="type">The batch operation to be performed</param>
        </member>
        <member name="M:Google.GData.Client.GDataBatchEntryData.Save(System.Xml.XmlWriter)">
            <summary>
            Persistence method for the GDataEntryBatch object
            </summary>
            <param name="writer">the xmlwriter to write into</param>
        </member>
        <member name="P:Google.GData.Client.GDataBatchEntryData.Type">
            <summary>accessor method public GDataBatchOperationType Type</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.GDataBatchEntryData.Id">
            <summary>accessor method public string Id</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.GDataBatchEntryData.Interrupt">
            <summary>accessor for the GDataBatchInterrrupt element</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.GDataBatchEntryData.Status">
            <summary>accessor method public GDataBatchStatus Status</summary> 
            <returns> </returns>
        </member>
        <member name="T:Google.GData.Client.AtomSourceConverter">
            <summary>TypeConverter, so that AtomHead shows up in the property pages
            </summary> 
        </member>
        <member name="M:Google.GData.Client.AtomSourceConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>Standard type converter method</summary>
        </member>
        <member name="M:Google.GData.Client.AtomSourceConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>Standard type converter method</summary>
        </member>
        <member name="T:Google.GData.Client.AtomSource">
            <summary>Represents the AtomSource object. If an atom:entry is copied from one feed 
            into another feed, then the source atom:feed's metadata (all child elements of atom:feed other
            than the atom:entry elements) MAY be preserved within the copied entry by adding an atom:source 
            child element, if it is not already present in the entry, and including some or all of the source
            feed's Metadata elements as the atom:source element's children. Such metadata SHOULD be preserved 
            if the source atom:feed contains any of the child elements atom:author, atom:contributor, 
            atom:rights, or atom:category and those child elements are not present in the source atom:entry.
            </summary> 
        </member>
        <member name="F:Google.GData.Client.AtomSource.authors">
            <summary>author collection</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomSource.contributors">
            <summary>contributors collection</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomSource.categories">
            <summary>category collection</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomSource.generator">
            <summary>the generator</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomSource.icon">
            <summary>icon, essentially an atom link</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomSource.id">
            <summary>ID</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomSource.links">
            <summary>link collection</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomSource.logo">
            <summary>logo, essentially an image link</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomSource.rights">
            <summary>rights, former copyrights</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomSource.subTitle">
            <summary>subtitle as string</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomSource.title">
            <summary>title property as string</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomSource.updated">
            <summary>updated time stamp</summary> 
        </member>
        <member name="M:Google.GData.Client.AtomSource.#ctor">
            <summary>public void AtomSource()</summary> 
        </member>
        <member name="M:Google.GData.Client.AtomSource.#ctor(Google.GData.Client.AtomFeed)">
            <summary>public AtomSource(AtomFeed feed)</summary> 
        </member>
        <member name="M:Google.GData.Client.AtomSource.SaveInnerXml(System.Xml.XmlWriter)">
            <summary>saves the inner state of the element</summary> 
            <param name="writer">the xmlWriter to save into </param>
        </member>
        <member name="M:Google.GData.Client.AtomSource.BaseUriChanged(Google.GData.Client.AtomUri)">
            <summary>just go down the child collections</summary> 
            <param name="uriBase"> as currently calculated</param>
        </member>
        <member name="M:Google.GData.Client.AtomSource.WalkTree(Google.GData.Client.IBaseWalkerAction)">
            <summary>calls the action on this object and all children</summary> 
            <param name="action">an IAtomBaseAction interface to call </param>
            <returns>true or false, pending outcome</returns>
        </member>
        <member name="P:Google.GData.Client.AtomSource.Authors">
            <summary>accessor method public Contributors AtomPersonCollection</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.AtomSource.Contributors">
            <summary>accessor method public Contributors AtomPersonCollection</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.AtomSource.Links">
            <summary>accessor method public Links AtomLinkCollection</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.AtomSource.Categories">
            <summary>returns the category collection</summary> 
        </member>
        <member name="P:Google.GData.Client.AtomSource.Generator">
            <summary>accessor method public FeedGenerator Generator</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.AtomSource.Icon">
            <summary>accessor method public AtomIcon Icon</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.AtomSource.Logo">
            <summary>accessor method public AtomLogo Logo</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.AtomSource.Updated">
            <summary>accessor method public DateTime LastUpdated</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.AtomSource.Title">
            <summary>accessor method public string Title</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.AtomSource.Subtitle">
            <summary>accessor method public string Subtitle</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.AtomSource.Id">
            <summary>accessor method public string Id</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.AtomSource.Rights">
            <summary>accessor method public string Rights</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.AtomSource.XmlName">
            <summary>Returns the constant representing this XML element.</summary> 
        </member>
        <member name="T:Google.GData.Client.AtomFeed">
            <summary>Base class to read gData feeds in Atom</summary>
            <remarks>
            <para>
            Version 1.0 changed to:
            <code>
            AtomFeed =
               element atom:feed {
                  atomCommonAttributes,
                  (atomAuthor*
                   atomCategory*
                   atomContributor*
                   atomGenerator?
                   atomIcon?
                   atomId
                   atomLink*
                   atomLogo?
                   atomRights?
                   atomSubtitle?
                   atomTitle
                   atomUpdated
                   extensionElement*),
                  atomEntry*
               }
            </code>
            In addition it holds:
            <list type="bullet">
                <item>
                    <term><c>opensearch:totalResults</c></term>
                    <description>Total number of search results available (not necessarily all present in the feed).</description>
                </item>
                <item>
                    <term><c>opensearch:startIndex</c></term>
                    <description>The 1-based index of the first result.</description>
                </item>
                <item>
                    <term><c>opensearch:itemsPerPage</c></term>
                    <description>The maximum number of items that appear on one page. This allows clients to generate direct links to any set of subsequent pages.</description>
                </item>
            </list>
            </para>
            <para>
            In addition to these OpenSearch tags, the response also includes the following Atom and gData tags:
            <list type="bullet">
                <item>
                    <term><c>atom:link rel="service.feed" type="application/atom+xml" href="..."/></c></term>
                    <description>Specifies the URI where the complete Atom feed can be retrieved.</description>
                </item>
                <item>
                    <term><c>atom:link rel="service.feed" type="application/rss+xml" href="..."/></c></term>
                    <description>Specifies the URI where the complete RSS feed can be retrieved.</description>
                </item>
                <item>
                    <term><c>atom:link rel="service.post" type="application/atom+xml" href="..."/></c></term>
                    <description>Specifies the Atom feed PostURI (where new entries can be posted).</description>
                </item>
                <item>
                    <term><c>atom:link rel="self" type="..." href="..."/></c></term>
                    <description>Contains the URI of this search request. The type attribute depends on the requested format. If no data changes, issuing a <c>GET</c> to this URI returns the same response.</description>
                </item>
                <item>
                    <term><c>atom:link rel="previous" type="application/atom+xml" href="..."/></c></term>
                    <description>Specifies the URI of the previous chunk of this query resultset, if it is chunked.</description>
                </item>
                <item>
                    <term><c>atom:link rel="next" type="application/atom+xml" href="..."/></c></term>
                    <description>Specifies the URI of the next chunk of this query resultset, if it is chunked.</description>
                </item>
                <item>
                    <term><c>gdata:processed parameter="..."/></c></term>
                    <description>One of these tags is inserted for each parameter understood and processed by the service, e.g. <c>gdata:processed parameter="author"</c>.</description>
                </item>
            </list>
            </para>
            </remarks> 
        </member>
        <member name="F:Google.GData.Client.AtomFeed.feedEntries">
            <summary>collection of feed entries</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomFeed.totalResults">
            <summary>holds the total results</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomFeed.startIndex">
            <summary>holds the start-index parameter</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomFeed.itemsPerPage">
            <summary>holds number of items per page</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomFeed.parameters">
            <summary>holds a collection of processed parameters</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomFeed.service">
            <summary>holds the service interface to use</summary> 
        </member>
        <member name="M:Google.GData.Client.AtomFeed.#ctor">
            <summary>default constructor</summary> 
        </member>
        <member name="M:Google.GData.Client.AtomFeed.#ctor(System.Uri,Google.GData.Client.IService)">
            <summary>default constructor</summary> 
            <param name="uriBase">the location the feed was loaded from</param>        
            <param name="service">the service used to create this feed</param>        
        </member>
        <member name="M:Google.GData.Client.AtomFeed.#ctor(Google.GData.Client.AtomFeed)">
            <summary>default constructor</summary> 
            <param name="originalFeed">if you want to create a copy feed, for batch use, e.g</param>        
        </member>
        <member name="M:Google.GData.Client.AtomFeed.IsFeedIdentical(Google.GData.Client.AtomFeed,Google.GData.Client.AtomFeed)">
            <summary>tries to determine if the two feeds derive from the same source</summary> 
            <param name="feedOne">the first feed</param>
            <param name="feedTwo">the second feed</param>
            <returns>true if believed to be the same source</returns>
        </member>
        <member name="M:Google.GData.Client.AtomFeed.CreateBatchFeed(Google.GData.Client.GDataBatchOperationType)">
            <summary>
            returns a new batchfeed with all the currently dirty entries in it
            </summary>
            <param name="defaultOperation">the default operation to execute</param>
            <returns>AtomFeed</returns>
        </member>
        <member name="M:Google.GData.Client.AtomFeed.AddOtherNamespaces(System.Xml.XmlWriter)">
            <summary>checks to see if we are a batch feed, if so, adds the batchNS</summary> 
            <param name="writer">the xmlwriter, where we want to add default namespaces to</param>
        </member>
        <member name="M:Google.GData.Client.AtomFeed.SkipNode(System.Xml.XmlNode)">
            <summary>checks if this is a namespace 
            decl that we already added</summary> 
            <param name="node">XmlNode to check</param>
            <returns>true if this node should be skipped </returns>
        </member>
        <member name="M:Google.GData.Client.AtomFeed.SaveInnerXml(System.Xml.XmlWriter)">
            <summary>saves the inner state of the element</summary> 
            <param name="writer">the xmlWriter to save into </param>
        </member>
        <member name="M:Google.GData.Client.AtomFeed.Parse(System.IO.Stream,Google.GData.Client.AlternativeFormat)">
            <summary>given a stream, parses it to construct the Feed object out of it</summary> 
            <param name="stream"> a stream representing hopefully valid XML</param>
            <param name="format"> indicates if the stream is Atom or Rss</param>
        </member>
        <member name="M:Google.GData.Client.AtomFeed.OnParsedNewEntry(System.Object,Google.GData.Client.FeedParserEventArgs)">
            <summary>Event chaining. We catch this by the baseFeedParsers, which 
            would not do anything with the gathered data. We pass the event up
            to the user; if the user doesn't discard it, we add the entry to our
            collection</summary> 
            <param name="sender"> the object which send the event</param>
            <param name="e">FeedParserEventArguments, holds the feed entry</param> 
            <returns> </returns>
        </member>
        <member name="M:Google.GData.Client.AtomFeed.OnNewExtensionElement(System.Object,Google.GData.Client.ExtensionElementEventArgs)">
            <summary>Event chaining. We catch this by the baseFeedParsers, which 
            would not do anything with the gathered data. We pass the event up
            to the user; if the user doesn't discard it, we add the entry to our
            collection</summary> 
            <param name="sender"> the object which send the event</param>
            <param name="e">FeedParserEventArguments, holds the feed entry</param> 
            <returns> </returns>
        </member>
        <member name="M:Google.GData.Client.AtomFeed.BaseUriChanged(Google.GData.Client.AtomUri)">
            <summary>just go down the child collections</summary> 
            <param name="uriBase"> as currently calculated</param>
        </member>
        <member name="M:Google.GData.Client.AtomFeed.Insert(Google.GData.Client.AtomEntry)">
            <summary>uses the set service to insert a new entry. </summary> 
            <param name="newEntry">the atomEntry to insert into the feed</param>
            <returns>the entry as echoed back from the server. The entry is NOT added
                     to the feeds collection</returns>
        </member>
        <member name="M:Google.GData.Client.AtomFeed.Publish">
            <summary>goes over all entries, and updates the ones that are dirty</summary> 
            <returns> </returns>
        </member>
        <member name="M:Google.GData.Client.AtomFeed.WalkTree(Google.GData.Client.IBaseWalkerAction)">
            <summary>calls the action on this object and all children</summary> 
            <param name="action">an IAtomBaseAction interface to call </param>
            <returns>true or false, pending outcome</returns>
        </member>
        <member name="E:Google.GData.Client.AtomFeed.NewAtomEntry">
            <summary>eventhandler, when the parser creates a new feed entry-> mirrored from underlying parser</summary> 
        </member>
        <member name="E:Google.GData.Client.AtomFeed.NewExtensionElement">
            <summary>eventhandler, when the parser finds a new extension element-> mirrored from underlying parser</summary> 
        </member>
        <member name="P:Google.GData.Client.AtomFeed.Post">
            <summary>accessor method public string Post</summary> 
            <returns>the Uri as string to the Post Service</returns>
        </member>
        <member name="P:Google.GData.Client.AtomFeed.BatchData">
            <summary>accessor to the batchdata for the entry</summary> 
            <returns> GDataBatch object </returns>
        </member>
        <member name="P:Google.GData.Client.AtomFeed.Batch">
            <summary>Retrieves the batch link for the current feed.</summary> 
            <returns>The URI of the batch support for the feed. </returns>
        </member>
        <member name="P:Google.GData.Client.AtomFeed.ReadOnly">
            <summary>returns whether or not the entry is read-only </summary> 
        </member>
        <member name="P:Google.GData.Client.AtomFeed.NextChunk">
            <summary>accessor method public string NextChunk</summary> 
            <returns>the Uri as string to the next chunk of the result</returns>
        </member>
        <member name="P:Google.GData.Client.AtomFeed.PrevChunk">
            <summary>accessor method public string PrevChunk</summary> 
            <returns>the Uri as a string to the previous chunk of the result</returns>
        </member>
        <member name="P:Google.GData.Client.AtomFeed.Feed">
            <summary>accessor method public string Feed</summary> 
            <returns>returns the Uri as string for the feed service </returns>
        </member>
        <member name="P:Google.GData.Client.AtomFeed.Self">
            <summary>accessor method public string Self</summary> 
            <returns>returns the Uri as string for the feed with the Query Parameters </returns>
        </member>
        <member name="P:Google.GData.Client.AtomFeed.Service">
            <summary>accessor method for the gData Service to use</summary> 
        </member>
        <member name="P:Google.GData.Client.AtomFeed.TotalResults">
            <summary>accessor method public int TotalResults</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.AtomFeed.StartIndex">
            <summary>accessor method public int StartIndex</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.AtomFeed.ItemsPerPage">
            <summary>accessor method public int ItemsPerPage</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.AtomFeed.Parameters">
            <summary>accessor method public string[] Parameters</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.AtomFeed.Entries">
            <summary>accessor method public ArrayList Entries</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.AtomFeed.XmlName">
            <summary>just returns the constant representing this xml element</summary> 
        </member>
        <member name="T:Google.GData.Client.QueryCategoryOperator">
            <summary>Enum to describe the different category boolean operations.
            </summary> 
        </member>
        <member name="F:Google.GData.Client.QueryCategoryOperator.AND">
            <summary>A logical AND operation.</summary>
        </member>
        <member name="F:Google.GData.Client.QueryCategoryOperator.OR">
            <summary>A logical OR operation.</summary>
        </member>
        <member name="T:Google.GData.Client.QueryCategory">
            <summary>Base class to hold an Atom category plus the boolean
            to create the query category.
            </summary> 
        </member>
        <member name="F:Google.GData.Client.QueryCategory.category">
            <summary>AtomCategory holder.</summary> 
        </member>
        <member name="F:Google.GData.Client.QueryCategory.categoryOperator">
            <summary>Boolean operator (can be OR or AND).</summary> 
        </member>
        <member name="F:Google.GData.Client.QueryCategory.isExcluded">
            <summary>Boolean negator (can be true or false).</summary> 
        </member>
        <member name="M:Google.GData.Client.QueryCategory.#ctor(Google.GData.Client.AtomCategory)">
            <summary>Constructor, given a category.</summary>
        </member>
        <member name="M:Google.GData.Client.QueryCategory.#ctor(System.String,Google.GData.Client.QueryCategoryOperator)">
            <summary>Constructor, given a category as a string from the URI.</summary>
        </member>
        <member name="P:Google.GData.Client.QueryCategory.Category">
            <summary>Accessor method public AtomCategory Category</summary> 
            <returns></returns>
        </member>
        <member name="P:Google.GData.Client.QueryCategory.Operator">
            <summary>Accessor method public QueryCategoryOperator Operator</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.QueryCategory.Excluded">
            <summary>Accessor method public bool Excluded</summary> 
            <returns> </returns>
        </member>
        <member name="T:Google.GData.Client.FeedQuery">
            <summary>Base class to create a GData query URI. Provides public 
            properties that describe the different aspects of the URI
            as well as a composite URI.
            </summary> 
        </member>
        <member name="F:Google.GData.Client.FeedQuery.query">
            <summary>baseUri property holder</summary> 
        </member>
        <member name="F:Google.GData.Client.FeedQuery.categories">
            <summary>category part as string, comma seperated</summary> 
        </member>
        <member name="F:Google.GData.Client.FeedQuery.author">
            <summary>author part as string</summary> 
        </member>
        <member name="F:Google.GData.Client.FeedQuery.extraParameters">
            <summary>extra parameters as string</summary> 
        </member>
        <member name="F:Google.GData.Client.FeedQuery.datetimeMin">
            <summary>mininum date/time as DateTime</summary> 
        </member>
        <member name="F:Google.GData.Client.FeedQuery.datetimeMax">
            <summary>maximum date/time as DateTime</summary> 
        </member>
        <member name="F:Google.GData.Client.FeedQuery.publishedMin">
            <summary>mininum date/time for the publicationdate as DateTime</summary> 
        </member>
        <member name="F:Google.GData.Client.FeedQuery.publishedMax">
            <summary>maximum date/time for the publicationdate as DateTime</summary> 
        </member>
        <member name="F:Google.GData.Client.FeedQuery.startIndex">
            <summary>start-index as integer</summary> 
        </member>
        <member name="F:Google.GData.Client.FeedQuery.numToRetrieve">
            <summary>number of entries to retrieve as integer</summary> 
        </member>
        <member name="F:Google.GData.Client.FeedQuery.altFormat">
            <summary>alternative format as AlternativeFormat</summary> 
        </member>
        <member name="F:Google.GData.Client.FeedQuery.baseUri">
            <summary>the base URI</summary> 
        </member>
        <member name="M:Google.GData.Client.FeedQuery.#ctor">
            <summary>Default constructor.</summary> 
        </member>
        <member name="M:Google.GData.Client.FeedQuery.#ctor(System.String)">
            <summary>constructor taking a base URI constructor.</summary> 
        </member>
        <member name="M:Google.GData.Client.FeedQuery.Parse(System.Uri,Google.GData.Client.Service@,Google.GData.Client.FeedQuery@)">
            <summary>Passing in a complete URI, we strip all the
            GData query-related things and then treat the rest
            as the base URI. For this we create a service.</summary> 
            <param name="uri">a complete URI</param>
            <param name="service">the new GData service for this URI</param>
            <param name="query">the parsed query object for this URI</param>
        </member>
        <member name="M:Google.GData.Client.FeedQuery.ParseUri(System.Uri)">
            <summary>protected void ParseUri</summary> 
            <param name="targetUri">takes an incoming Uri string and parses all the properties out of it</param>
            <returns>throws a query exception when it finds something wrong with the input, otherwise returns a baseuri</returns>
        </member>
        <member name="M:Google.GData.Client.FeedQuery.ParseUri(System.String)">
            <summary>protected void ParseUri</summary> 
            <param name="target">takes an incoming string and parses all the properties out of it</param>
            <returns>throws a query exception when it finds something wrong with the input, otherwise returns a baseuri</returns>
        </member>
        <member name="M:Google.GData.Client.FeedQuery.CleanPart(System.String)">
            <summary>Takes an incoming URI segment and removes leading/trailing slashes.</summary> 
            <param name="part">the URI segment to clean</param>
            <returns>the cleaned string</returns>
        </member>
        <member name="M:Google.GData.Client.FeedQuery.ValidateUri(System.Uri)">
            <summary>Checks to see if the URI is valid to be used for an Atom query.</summary> 
            <returns>Throws a client exception if not</returns>
        </member>
        <member name="M:Google.GData.Client.FeedQuery.Reset">
            <summary>Resets object state to default, as if newly created.
            </summary> 
        </member>
        <member name="M:Google.GData.Client.FeedQuery.CalculateQuery">
            <summary>Creates the partial URI query string based on all set properties.</summary> 
            <returns> string => the query part of the URI</returns>
        </member>
        <member name="M:Google.GData.Client.FeedQuery.FormatToString(Google.GData.Client.AlternativeFormat)">
            <summary>Converts an AlternativeFormat to a string for use in
            the query string.</summary> 
            <param name="format">the format that we want to be converted to string </param>
            <returns>string version of the format</returns>
        </member>
        <member name="P:Google.GData.Client.FeedQuery.Uri">
            <summary>We do not hold on to the precalculated Uri.
            It's safer and cheaper to calculate this on the fly.
            Setting this loses the base Uri.</summary> 
            <returns>returns the complete UriPart that is used to execute the query</returns>
        </member>
        <member name="P:Google.GData.Client.FeedQuery.Query">
            <summary>Accessor method public string Query.</summary> 
            <returns>returns the query string portion of the URI</returns>
        </member>
        <member name="P:Google.GData.Client.FeedQuery.Categories">
            <summary>Accessor method public string Category.</summary> 
            <returns>the category filter</returns>
        </member>
        <member name="P:Google.GData.Client.FeedQuery.ExtraParameters">
            <summary>Accessor method public string ExtraParameters.</summary> 
            <returns></returns>
        </member>
        <member name="P:Google.GData.Client.FeedQuery.Author">
            <summary>Accessor method public string Author.</summary> 
            <returns>the requested author</returns>
        </member>
        <member name="P:Google.GData.Client.FeedQuery.StartDate">
            <summary>set's the mininum daterange value for the updated element</summary> 
            <returns>the min (inclusive) date/time</returns>
        </member>
        <member name="P:Google.GData.Client.FeedQuery.EndDate">
            <summary>set's the maximum daterange value for the updated element</summary> 
            <returns>the max (exclusive) date/time</returns>
        </member>
        <member name="P:Google.GData.Client.FeedQuery.MinPublication">
            <summary>set's the mininum daterange value for the publication element</summary> 
            <returns>the min (inclusive) date/time</returns>
        </member>
        <member name="P:Google.GData.Client.FeedQuery.MaxPublication">
            <summary>set's the maximum daterange value for the publication element</summary> 
            <returns>the max (exclusive) date/time</returns>
        </member>
        <member name="P:Google.GData.Client.FeedQuery.StartIndex">
            <summary>Accessor method public int StartIndex.</summary> 
            <returns>the start-index query parameter, a 1-based index
            indicating the first result to be retrieved.</returns>
        </member>
        <member name="P:Google.GData.Client.FeedQuery.NumberToRetrieve">
            <summary>Accessor method public int NumberToRetrieve.</summary> 
            <returns>the number of entries to retrieve</returns>
        </member>
        <member name="P:Google.GData.Client.FeedQuery.FeedFormat">
            <summary>Accessor method public AlternativeFormat FeedFormat.
            </summary> 
            <returns> </returns>
        </member>
        <member name="T:Google.GData.Client.BaseNameTable">
            <summary>BaseNameTable. An initialized nametable for faster XML processing
            parses:  
                *  opensearch:totalResults - the total number of search results available (not necessarily all present in the feed).
                *  opensearch:startIndex - the 1-based index of the first result.
                *  opensearch:itemsPerPage - the maximum number of items that appear on one page. This allows clients to generate direct links to any set of subsequent pages.
                *  gData:processed
             </summary>
        </member>
        <member name="F:Google.GData.Client.BaseNameTable.NSOpenSearchRss">
            <summary>static namespace string declaration</summary> 
        </member>
        <member name="F:Google.GData.Client.BaseNameTable.NSAtom">
            <summary>static namespace string declaration</summary> 
        </member>
        <member name="F:Google.GData.Client.BaseNameTable.NSAppPublishing">
            <summary>namespace for app publishing control</summary> 
        </member>
        <member name="F:Google.GData.Client.BaseNameTable.NSXml">
            <summary>xml namespace</summary> 
        </member>
        <member name="F:Google.GData.Client.BaseNameTable.gNamespace">
            <summary>GD namespace</summary> 
        </member>
        <member name="F:Google.GData.Client.BaseNameTable.gBatchNamespace">
            <summary>GData batch extension namespace</summary> 
        </member>
        <member name="F:Google.GData.Client.BaseNameTable.gNamespacePrefix">
            <summary>GD namespace prefix</summary> 
        </member>
        <member name="F:Google.GData.Client.BaseNameTable.ServicePost">
            <summary>the post definiton in the link collection</summary> 
        </member>
        <member name="F:Google.GData.Client.BaseNameTable.ServiceFeed">
            <summary>the feed definition in the link collection</summary> 
        </member>
        <member name="F:Google.GData.Client.BaseNameTable.ServiceBatch">
            <summary>the batch URI definition in the link collection</summary>
        </member>
        <member name="F:Google.GData.Client.BaseNameTable.gKind">
            <summary>GData Kind Scheme</summary> 
        </member>
        <member name="F:Google.GData.Client.BaseNameTable.ServiceEdit">
            <summary>the edit definition in the link collection</summary> 
        </member>
        <member name="F:Google.GData.Client.BaseNameTable.ServiceNext">
            <summary>the next chunk URI in the link collection</summary> 
        </member>
        <member name="F:Google.GData.Client.BaseNameTable.ServicePrev">
            <summary>the previous chunk URI in the link collection</summary> 
        </member>
        <member name="F:Google.GData.Client.BaseNameTable.ServiceSelf">
            <summary>the self URI in the link collection</summary> 
        </member>
        <member name="F:Google.GData.Client.BaseNameTable.ServiceAlternate">
            <summary>the alternate URI in the link collection</summary> 
        </member>
        <member name="F:Google.GData.Client.BaseNameTable.ServiceMedia">
            <summary>the alternate URI in the link collection</summary> 
        </member>
        <member name="F:Google.GData.Client.BaseNameTable.AtomPrefix">
            <summary>prefix for atom if writing</summary> 
        </member>
        <member name="F:Google.GData.Client.BaseNameTable.gDataPrefix">
            <summary>prefix for gNamespace if writing</summary> 
        </member>
        <member name="F:Google.GData.Client.BaseNameTable.gBatchPrefix">
            <summary>prefix for gdata:batch if writing</summary> 
        </member>
        <member name="F:Google.GData.Client.BaseNameTable.gAppPublishing">
            <summary>prefix for appPublishing if writing</summary> 
        </member>
        <member name="F:Google.GData.Client.BaseNameTable.XmlElementPubControl">
            <summary>xmlelement for app:control</summary> 
        </member>
        <member name="F:Google.GData.Client.BaseNameTable.XmlElementPubDraft">
            <summary>xmlelement for app:draft</summary> 
        </member>
        <member name="F:Google.GData.Client.BaseNameTable.XmlElementBatchId">
            <summary>xmlelement for batch:id</summary> 
        </member>
        <member name="F:Google.GData.Client.BaseNameTable.XmlElementBatchOperation">
            <summary>xmlelement for batch:operation</summary> 
        </member>
        <member name="F:Google.GData.Client.BaseNameTable.XmlElementBatchStatus">
            <summary>xmlelement for batch:status</summary> 
        </member>
        <member name="F:Google.GData.Client.BaseNameTable.XmlElementBatchInterrupt">
            <summary>xmlelement for batch:interrupted</summary> 
        </member>
        <member name="F:Google.GData.Client.BaseNameTable.XmlAttributeBatchContentType">
            <summary>xmlattribute for batch:status@contentType</summary> 
        </member>
        <member name="F:Google.GData.Client.BaseNameTable.XmlAttributeBatchStatusCode">
            <summary>xmlattribute for batch:status@code</summary> 
        </member>
        <member name="F:Google.GData.Client.BaseNameTable.XmlAttributeBatchReason">
            <summary>xmlattribute for batch:status@reason</summary> 
        </member>
        <member name="F:Google.GData.Client.BaseNameTable.XmlElementBatchErrors">
            <summary>xmlelement for batch:status:errors</summary> 
        </member>
        <member name="F:Google.GData.Client.BaseNameTable.XmlElementBatchError">
            <summary>xmlelement for batch:status:errors:error</summary> 
        </member>
        <member name="F:Google.GData.Client.BaseNameTable.XmlAttributeBatchSuccess">
            <summary>xmlattribute for batch:interrupted@success</summary> 
        </member>
        <member name="F:Google.GData.Client.BaseNameTable.XmlAttributeBatchParsed">
            <summary>XmlAttribute for batch:interrupted@parsed</summary> 
        </member>
        <member name="F:Google.GData.Client.BaseNameTable.XmlAttributeBatchField">
            <summary>XmlAttribute for batch:interrupted@field</summary> 
        </member>
        <member name="F:Google.GData.Client.BaseNameTable.XmlAttributeBatchUnprocessed">
            <summary>XmlAttribute for batch:interrupted@unprocessed</summary> 
        </member>
        <member name="F:Google.GData.Client.BaseNameTable.XmlValue">
            <summary>XmlConstant for value in enums</summary> 
        </member>
        <member name="F:Google.GData.Client.BaseNameTable.XmlName">
            <summary>XmlConstant for name in enums</summary> 
        </member>
        <member name="F:Google.GData.Client.BaseNameTable.XmlAttributeType">
            <summary>XmlAttribute for type in enums</summary> 
        </member>
        <member name="F:Google.GData.Client.BaseNameTable.atomNameTable">
            <summary>the nametable itself, based on XML core</summary> 
        </member>
        <member name="F:Google.GData.Client.BaseNameTable.totalResults">
            <summary>opensearch:totalResults</summary> 
        </member>
        <member name="F:Google.GData.Client.BaseNameTable.startIndex">
            <summary>opensearch:startIndex</summary> 
        </member>
        <member name="F:Google.GData.Client.BaseNameTable.itemsPerPage">
            <summary>opensearch:itemsPerPage</summary> 
        </member>
        <member name="F:Google.GData.Client.BaseNameTable.baseUri">
            <summary>xml base</summary> 
        </member>
        <member name="F:Google.GData.Client.BaseNameTable.language">
            <summary>xml language</summary> 
        </member>
        <member name="M:Google.GData.Client.BaseNameTable.InitAtomParserNameTable">
            <summary>initializes the name table for use with atom parsing. This is the
            only place where strings are defined for parsing</summary> 
        </member>
        <member name="P:Google.GData.Client.BaseNameTable.Nametable">
            <summary>Read only accessor for atomNameTable</summary> 
        </member>
        <member name="P:Google.GData.Client.BaseNameTable.BatchId">
            <summary>Read only accessor for BatchId</summary> 
        </member>
        <member name="P:Google.GData.Client.BaseNameTable.BatchOperation">
            <summary>Read only accessor for BatchOperation</summary> 
        </member>
        <member name="P:Google.GData.Client.BaseNameTable.BatchStatus">
            <summary>Read only accessor for BatchStatus</summary> 
        </member>
        <member name="P:Google.GData.Client.BaseNameTable.BatchInterrupt">
            <summary>Read only accessor for BatchInterrupt</summary> 
        </member>
        <member name="P:Google.GData.Client.BaseNameTable.BatchContentType">
            <summary>Read only accessor for BatchContentType</summary> 
        </member>
        <member name="P:Google.GData.Client.BaseNameTable.BatchStatusCode">
            <summary>Read only accessor for BatchStatusCode</summary> 
        </member>
        <member name="P:Google.GData.Client.BaseNameTable.BatchErrors">
            <summary>Read only accessor for BatchErrors</summary> 
        </member>
        <member name="P:Google.GData.Client.BaseNameTable.BatchError">
            <summary>Read only accessor for BatchError</summary> 
        </member>
        <member name="P:Google.GData.Client.BaseNameTable.BatchReason">
            <summary>Read only accessor for BatchReason</summary> 
        </member>
        <member name="P:Google.GData.Client.BaseNameTable.BatchField">
            <summary>Read only accessor for BatchReason</summary> 
        </member>
        <member name="P:Google.GData.Client.BaseNameTable.BatchUnprocessed">
            <summary>Read only accessor for BatchUnprocessed</summary> 
        </member>
        <member name="P:Google.GData.Client.BaseNameTable.BatchSuccessCount">
            <summary>Read only accessor for BatchSuccessCount</summary> 
        </member>
        <member name="P:Google.GData.Client.BaseNameTable.BatchFailureCount">
            <summary>Read only accessor for BatchFailureCount</summary> 
        </member>
        <member name="P:Google.GData.Client.BaseNameTable.BatchParsedCount">
            <summary>Read only accessor for BatchParsedCount</summary> 
        </member>
        <member name="P:Google.GData.Client.BaseNameTable.TotalResults">
            <summary>Read only accessor for totalResults</summary> 
        </member>
        <member name="P:Google.GData.Client.BaseNameTable.StartIndex">
            <summary>Read only accessor for startIndex</summary> 
        </member>
        <member name="P:Google.GData.Client.BaseNameTable.ItemsPerPage">
            <summary>Read only accessor for itemsPerPage</summary> 
        </member>
        <member name="P:Google.GData.Client.BaseNameTable.Parameter">
            <summary>Read only accessor for parameter</summary> 
        </member>
        <member name="P:Google.GData.Client.BaseNameTable.Base">
            <summary>Read only accessor for baseUri</summary> 
        </member>
        <member name="P:Google.GData.Client.BaseNameTable.Language">
            <summary>Read only accessor for language</summary> 
        </member>
        <member name="P:Google.GData.Client.BaseNameTable.Value">
            <summary>Read only accessor for value</summary> 
        </member>
        <member name="P:Google.GData.Client.BaseNameTable.Type">
            <summary>Read only accessor for value</summary> 
        </member>
        <member name="P:Google.GData.Client.BaseNameTable.Name">
            <summary>Read only accessor for name</summary> 
        </member>
        <member name="T:Google.GData.Client.AtomPersonConverter">
            <summary>TypeConverter, so that AtomHead shows up in the property pages
            </summary> 
        </member>
        <member name="M:Google.GData.Client.AtomPersonConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>Standard type converter method</summary>
        </member>
        <member name="M:Google.GData.Client.AtomPersonConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>Standard type converter method</summary>
        </member>
        <member name="T:Google.GData.Client.AtomPersonType">
            <summary>enum to describe the different person types
            </summary> 
        </member>
        <member name="F:Google.GData.Client.AtomPersonType.Author">
            <summary>is an author</summary>
        </member>
        <member name="F:Google.GData.Client.AtomPersonType.Contributor">
            <summary>is an contributor</summary>
        </member>
        <member name="F:Google.GData.Client.AtomPersonType.Unknown">
            
            <summary>parsing error</summary>
        </member>
        <member name="T:Google.GData.Client.AtomPerson">
            <summary>generic Person object, used for the feed and for the entry
            </summary> 
        </member>
        <member name="F:Google.GData.Client.AtomPerson.name">
            <summary>name holds the Name property as a string</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomPerson.email">
            <summary>email holds the email property as a string</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomPerson.uri">
            <summary>link holds an Uri, representing the link atribute</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomPerson.type">
            <summary>holds  the type for persistence</summary> 
        </member>
        <member name="M:Google.GData.Client.AtomPerson.#ctor">
            <summary>public default constructor, usefull only for property pages</summary> 
        </member>
        <member name="M:Google.GData.Client.AtomPerson.#ctor(Google.GData.Client.AtomPersonType)">
            <summary>Constructor taking a type to indicate whether person is author or contributor.</summary> 
            <param name="type">indicates if author or contributor</param>
        </member>
        <member name="M:Google.GData.Client.AtomPerson.#ctor(Google.GData.Client.AtomPersonType,System.String)">
            <summary>Constructor taking a type to indicate whether person is author or contributor, plus the person's name</summary> 
            <param name="type">indicates if author or contributor</param>
            <param name="name">person's name</param>
        </member>
        <member name="M:Google.GData.Client.AtomPerson.SaveInnerXml(System.Xml.XmlWriter)">
            <summary>saves the inner state of the element</summary> 
            <param name="writer">the xmlWriter to save into </param>
        </member>
        <member name="M:Google.GData.Client.AtomPerson.ShouldBePersisted">
            <summary>figures out if this object should be persisted</summary> 
            <returns> true, if it's worth saving</returns>
        </member>
        <member name="P:Google.GData.Client.AtomPerson.Name">
            <summary>accessor method public string Name</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.AtomPerson.Uri">
            <summary>accessor method public Uri Uri</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.AtomPerson.Email">
            <summary>accessor method public Uri Email</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.AtomPerson.XmlName">
            <summary>Just returns the constant representing this XML element.</summary> 
        </member>
        <member name="T:Google.GData.Client.GDataCredentials">
            <summary>
            the class holds username and password to replace networkcredentials
            </summary>
        </member>
        <member name="M:Google.GData.Client.GDataCredentials.#ctor(System.String,System.String)">
            <summary>
            default constructor
            </summary>
            <param name="username">the username to use</param>
            <param name="password">the password to use</param>
        </member>
        <member name="P:Google.GData.Client.GDataCredentials.Username">
            <summary>accessor method public string Username</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.GDataCredentials.Password">
            <summary>accessor method Password</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.GDataCredentials.NetworkCredential">
            <summary>
            returns a windows conforming NetworkCredential 
            </summary>
        </member>
        <member name="T:Google.GData.Client.GDataRequestFactory">
            <summary>base GDataRequestFactory implementation</summary> 
        </member>
        <member name="F:Google.GData.Client.GDataRequestFactory.GDataAgent">
            <summary>this factory's agent</summary> 
        </member>
        <member name="F:Google.GData.Client.GDataRequestFactory.SetCookieHeader">
            <summary>Cookie setting header, returned from server</summary>
        </member>
        <member name="F:Google.GData.Client.GDataRequestFactory.CookieHeader">
            <summary>Cookie client header</summary>
        </member>
        <member name="F:Google.GData.Client.GDataRequestFactory.SlugHeader">
            <summary>Slug client header</summary>
        </member>
        <member name="F:Google.GData.Client.GDataRequestFactory.userAgent">
            <summary>holds the user-agent</summary> 
        </member>
        <member name="M:Google.GData.Client.GDataRequestFactory.#ctor(System.String)">
            <summary>default constructor</summary> 
        </member>
        <member name="M:Google.GData.Client.GDataRequestFactory.CreateRequest(Google.GData.Client.GDataRequestType,System.Uri)">
            <summary>default constructor</summary> 
        </member>
        <member name="P:Google.GData.Client.GDataRequestFactory.UseGZip">
            <summary>set wether or not new request should use GZip</summary>
        </member>
        <member name="P:Google.GData.Client.GDataRequestFactory.Cookie">
            <summary>set's and get's the sharding cookie</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.GDataRequestFactory.ContentType">
            <summary>set's and get's the content Type, used for binary transfers</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.GDataRequestFactory.Slug">
            <summary>set's and get's the slug header, used for binary transfers
            note that the data will be URLencoded before send</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.GDataRequestFactory.UserAgent">
            <summary>accessor method public string UserAgent</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.GDataRequestFactory.Proxy">
            <summary>accessor method to the webproxy object to use</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.GDataRequestFactory.KeepAlive">
            <summary>indicates if the connection should be kept alive, default
            is true</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.GDataRequestFactory.CustomHeaders">
            <summary>accessor method public StringArray CustomHeaders</summary> 
            <returns> </returns>
        </member>
        <member name="T:Google.GData.Client.GDataRequest">
            <summary>base GDataRequest implmentation</summary> 
        </member>
        <member name="F:Google.GData.Client.GDataRequest.webRequest">
            <summary>holds the webRequest object</summary> 
        </member>
        <member name="F:Google.GData.Client.GDataRequest.webResponse">
            <summary>holds the webresponse object</summary> 
        </member>
        <member name="F:Google.GData.Client.GDataRequest.targetUri">
            <summary>holds the target Uri</summary> 
        </member>
        <member name="F:Google.GData.Client.GDataRequest.type">
            <summary>holds request type</summary> 
        </member>
        <member name="F:Google.GData.Client.GDataRequest.credentials">
            <summary>holds the credential information</summary> 
        </member>
        <member name="F:Google.GData.Client.GDataRequest.requestStream">
            <summary>holds the request if a stream is open</summary> 
        </member>
        <member name="F:Google.GData.Client.GDataRequest.disposed">
            <summary>holds if we are disposed</summary> 
        </member>
        <member name="F:Google.GData.Client.GDataRequest.useGZip">
            <summary>set wheter or not this request should use GZip</summary>
        </member>
        <member name="F:Google.GData.Client.GDataRequest.responseStream">
            <summary>stream from the response</summary>
        </member>
        <member name="F:Google.GData.Client.GDataRequest.contentType">
            <summary>holds the contenttype to use if overridden</summary>
        </member>
        <member name="F:Google.GData.Client.GDataRequest.slugHeader">
            <summary>holds the slugheader to use if overridden</summary>
        </member>
        <member name="M:Google.GData.Client.GDataRequest.#ctor(Google.GData.Client.GDataRequestType,System.Uri,Google.GData.Client.GDataRequestFactory)">
            <summary>default constructor</summary> 
        </member>
        <member name="M:Google.GData.Client.GDataRequest.Dispose">
            <summary>implements the disposable interface</summary> 
        </member>
        <member name="M:Google.GData.Client.GDataRequest.Dispose(System.Boolean)">
            <summary>does the real disposition</summary> 
            <param name="disposing">indicates if dispose called it or finalize</param>
        </member>
        <member name="M:Google.GData.Client.GDataRequest.Reset">
            <summary>resets the object's state</summary> 
        </member>
        <member name="M:Google.GData.Client.GDataRequest.GetRequestStream">
            <summary>returns the writable request stream</summary> 
            <returns> the stream to write into</returns>
        </member>
        <member name="M:Google.GData.Client.GDataRequest.EnsureWebRequest">
            <summary>ensures that the correct HTTP verb is set on the stream</summary> 
        </member>
        <member name="M:Google.GData.Client.GDataRequest.EnsureCredentials">
            <summary>sets up the correct credentials for this call, pending 
            security scheme</summary> 
        </member>
        <member name="M:Google.GData.Client.GDataRequest.Execute">
            <summary>Executes the request and prepares the response stream. Also 
            does error checking</summary> 
        </member>
        <member name="M:Google.GData.Client.GDataRequest.GetResponseStream">
            <summary>gets the readable response stream</summary> 
            <returns> the response stream</returns>
        </member>
        <member name="P:Google.GData.Client.GDataRequest.TargetUri">
            <summary>
            exposing the private targetUri so that subclasses can override
            the value for redirect handling
            </summary>
        </member>
        <member name="P:Google.GData.Client.GDataRequest.UseGZip">
            <summary>set wether or not this request should use GZip</summary>
        </member>
        <member name="P:Google.GData.Client.GDataRequest.Credentials">
            <summary>accessor method for the GDataCredentials used</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.GDataRequest.ContentType">
            <summary>set's and get's the content Type, used for binary transfers</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.GDataRequest.Slug">
            <summary>set's and get's the slugHeader, used for binary transfers</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.GDataRequest.Request">
            <summary>accessor method protected WebRequest Request</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.GDataRequest.Response">
            <summary>accessor method protected WebResponse Response</summary> 
            <returns> </returns>
        </member>
        <member name="T:Google.GData.Client.GAuthSubRequestFactory">
            <summary> GDataAuthSubRequestFactory implementation</summary> 
        </member>
        <member name="T:Google.GData.Client.GDataGAuthRequestFactory">
            <summary>base GDataRequestFactory implementation</summary> 
        </member>
        <member name="F:Google.GData.Client.GDataGAuthRequestFactory.GDataGAuthAgent">
            <summary>this factory's agent</summary> 
        </member>
        <member name="M:Google.GData.Client.GDataGAuthRequestFactory.#ctor(System.String,System.String)">
            <summary>default constructor</summary> 
        </member>
        <member name="M:Google.GData.Client.GDataGAuthRequestFactory.#ctor(System.String,System.String,System.String)">
            <summary>default constructor</summary> 
        </member>
        <member name="M:Google.GData.Client.GDataGAuthRequestFactory.CreateRequest(Google.GData.Client.GDataRequestType,System.Uri)">
            <summary>default constructor</summary> 
        </member>
        <member name="M:Google.GData.Client.GDataGAuthRequestFactory.QueryAuthToken(Google.GData.Client.GDataCredentials)">
            <summary>Get's an authentication token for the current credentials</summary> 
        </member>
        <member name="P:Google.GData.Client.GDataGAuthRequestFactory.GAuthToken">
            <summary>Get/Set accessor for gAuthToken</summary> 
        </member>
        <member name="P:Google.GData.Client.GDataGAuthRequestFactory.UserAgent">
            <summary>accessor method public string UserAgent, with GFE support</summary> 
            <remarks>GFE will enable gzip support ONLY for browser that have the string
            "gzip" in their user agent (IE or Mozilla), since lot of browsers have a
            broken gzip support.</remarks>
        </member>
        <member name="P:Google.GData.Client.GDataGAuthRequestFactory.ApplicationName">
            <summary>Get/Set accessor for the application name</summary> 
        </member>
        <member name="P:Google.GData.Client.GDataGAuthRequestFactory.Service">
            <summary>returns the service string</summary> 
        </member>
        <member name="P:Google.GData.Client.GDataGAuthRequestFactory.MethodOverride">
            <summary>Let's assume you are behind a corporate firewall that does not 
            allow all HTTP verbs (as you know, the atom protocol uses GET, 
            POST, PUT and DELETE). If you set MethodOverride to true,
            PUT and DELETE will be simulated using HTTP Post. It will
            add an X-Method-Override header to the request that 
            indicates the "real" method we wanted to send. 
            </summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.GDataGAuthRequestFactory.StrictRedirect">
            <summary>indicates if a redirect should be followed on not HTTPGet</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.GDataGAuthRequestFactory.NumberOfRetries">
            <summary>
            property accessor to adjust how often a request of this factory should retry
            </summary>
        </member>
        <member name="P:Google.GData.Client.GDataGAuthRequestFactory.AccountType">
            <summary>
            property accessor to set the account type that is used during
            authentication. Defaults, if not set, to GOOGLE_OR_HOSTED
            </summary>
        </member>
        <member name="P:Google.GData.Client.GDataGAuthRequestFactory.CaptchaAnswer">
            <summary>property to hold the Answer for a challenge</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.GDataGAuthRequestFactory.CaptchaToken">
            <summary>property to hold the token for a challenge</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.GDataGAuthRequestFactory.Handler">
            <summary>accessor method public string Handler</summary> 
            <returns> </returns>
        </member>
        <member name="F:Google.GData.Client.GAuthSubRequestFactory.GDataGAuthSubAgent">
            <summary>this factory's agent</summary> 
        </member>
        <member name="F:Google.GData.Client.GAuthSubRequestFactory.privateKey">
            holds the private key that is used to sign the requests
        </member>
        <member name="M:Google.GData.Client.GAuthSubRequestFactory.#ctor(System.String,System.String)">
            <summary>default constructor</summary> 
        </member>
        <member name="M:Google.GData.Client.GAuthSubRequestFactory.#ctor(System.String,System.String,System.String)">
            <summary>default constructor</summary> 
        </member>
        <member name="M:Google.GData.Client.GAuthSubRequestFactory.CreateRequest(Google.GData.Client.GDataRequestType,System.Uri)">
            <summary>default constructor</summary> 
        </member>
        <member name="P:Google.GData.Client.GAuthSubRequestFactory.Token">
            <summary>accessor method public string Token</summary> 
            <returns>the string token for the authsub request </returns>
        </member>
        <member name="P:Google.GData.Client.GAuthSubRequestFactory.PrivateKey">
            <summary>accessor method public AsymmetricAlgorithm PrivateKey</summary> 
            <returns>the private Key used for the authsub request </returns>
        </member>
        <member name="T:Google.GData.Client.GAuthSubRequest">
            <summary>base GDataRequest implementation</summary> 
        </member>
        <member name="T:Google.GData.Client.GDataGAuthRequest">
            <summary>base GDataRequest implementation</summary> 
        </member>
        <member name="F:Google.GData.Client.GDataGAuthRequest.requestCopy">
            <summary>holds the input in memory stream</summary> 
        </member>
        <member name="F:Google.GData.Client.GDataGAuthRequest.factory">
            <summary>holds the factory instance</summary> 
        </member>
        <member name="M:Google.GData.Client.GDataGAuthRequest.#ctor(Google.GData.Client.GDataRequestType,System.Uri,Google.GData.Client.GDataGAuthRequestFactory)">
            <summary>default constructor</summary> 
        </member>
        <member name="M:Google.GData.Client.GDataGAuthRequest.GetRequestStream">
            <summary>returns the writable request stream</summary> 
            <returns> the stream to write into</returns>
        </member>
        <member name="M:Google.GData.Client.GDataGAuthRequest.Dispose(System.Boolean)">
            <summary>does the real disposition</summary> 
            <param name="disposing">indicates if dispose called it or finalize</param>
        </member>
        <member name="M:Google.GData.Client.GDataGAuthRequest.EnsureCredentials">
            <summary>sets up the correct credentials for this call, pending 
            security scheme</summary> 
        </member>
        <member name="M:Google.GData.Client.GDataGAuthRequest.EnsureWebRequest">
            <summary>sets the redirect to false after everything else
            is done </summary> 
        </member>
        <member name="M:Google.GData.Client.GDataGAuthRequest.QueryAuthToken(Google.GData.Client.GDataCredentials)">
            <summary>goes to the Google auth service, and gets a new auth token</summary> 
            <returns>the auth token, or NULL if none received</returns>
        </member>
        <member name="M:Google.GData.Client.GDataGAuthRequest.getAuthException(Google.GData.Client.TokenCollection,System.Net.HttpWebResponse)">
            <summary>
             Returns the respective GDataAuthenticationException given the return
            values from the login URI handler.
            </summary>
            <param name="tokens">The tokencollection of the parsed return form</param>
            <param name="response">the  webresponse</param> 
            <returns>AuthenticationException</returns>
        </member>
        <member name="M:Google.GData.Client.GDataGAuthRequest.Execute">
            <summary>Executes the request and prepares the response stream. Also 
            does error checking</summary> 
        </member>
        <member name="M:Google.GData.Client.GDataGAuthRequest.Execute(System.Int32)">
            <summary>Executes the request and prepares the response stream. Also 
            does error checking</summary> 
            <param name="iRetrying">indicates the n-th time this is run</param>
        </member>
        <member name="M:Google.GData.Client.GDataGAuthRequest.CopyRequestData">
            <summary>takes our copy of the stream, and puts it into the request stream</summary> 
        </member>
        <member name="P:Google.GData.Client.GDataGAuthRequest.RequestCopy">
            <summary>Read only accessor for requestCopy</summary> 
        </member>
        <member name="F:Google.GData.Client.GAuthSubRequest.factory">
            <summary>holds the factory instance</summary> 
        </member>
        <member name="M:Google.GData.Client.GAuthSubRequest.#ctor(Google.GData.Client.GDataRequestType,System.Uri,Google.GData.Client.GAuthSubRequestFactory)">
            <summary>default constructor</summary> 
        </member>
        <member name="M:Google.GData.Client.GAuthSubRequest.EnsureCredentials">
            <summary>sets up the correct credentials for this call, pending 
            security scheme</summary> 
        </member>
        <member name="T:Google.GData.Client.AtomLogo">
            <summary>atomLogo object representation. 
                    The "atom:logo" element's content is an IRI reference [RFC3987] which '+
                    identifies an image which provides visual identification for a feed.
                    The image SHOULD have an aspect ratio of 2 (horizontal) to 1 (vertical).
                    implemented currently by reusing atomBaseLink. 
            </summary> 
        </member>
        <member name="P:Google.GData.Client.AtomLogo.XmlName">
            <summary>Returns the constant representing this XML element.</summary> 
        </member>
        <member name="T:Google.GData.Client.AtomLink">
            <summary>AtomLink represents an atom:link element
            atomLink = element atom:link {
               atomCommonAttributes,
               attribute href { atomUri },
               attribute rel { atomNCName | atomUri }?,
               attribute type { atomMediaType }?,
               attribute hreflang { atomLanguageTag }?,
               attribute title { text }?,
               attribute length { text }?,
               empty
            </summary> 
        </member>
        <member name="F:Google.GData.Client.AtomLink.href">
            <summary>property holder exposed over get/set</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomLink.rel">
            <summary>property holder exposed over get/set</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomLink.type">
            <summary>property holder exposed over get/set</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomLink.hreflang">
            <summary>property holder exposed over get/set</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomLink.title">
            <summary>property holder exposed over get/set</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomLink.length">
            <summary>property holder exposed over get/set</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomLink.HTML_TYPE">
            <summary>HTML Link Type</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomLink.ATOM_TYPE">
            <summary>ATOM Link Type</summary>
        </member>
        <member name="M:Google.GData.Client.AtomLink.#ctor">
            <summary>default empty constructor</summary> 
        </member>
        <member name="M:Google.GData.Client.AtomLink.#ctor(System.String)">
            <summary>public AtomLink(string uri)</summary> 
            <param name="link">the uri for the link </param>
        </member>
        <member name="M:Google.GData.Client.AtomLink.#ctor(System.String,System.String)">
            <summary>
            constructor used in atomfeed to create new links
            </summary>
            <param name="type">the type of link to create</param>
            <param name="rel">the rel value</param>
        </member>
        <member name="M:Google.GData.Client.AtomLink.SaveXmlAttributes(System.Xml.XmlWriter)">
            <summary>overridden to save attributes for this(XmlWriter writer)</summary> 
            <param name="writer">the xmlwriter to save into </param>
        </member>
        <member name="M:Google.GData.Client.AtomLink.ShouldBePersisted">
            <summary>figures out if this object should be persisted</summary> 
            <returns> true, if it's worth saving</returns>
        </member>
        <member name="P:Google.GData.Client.AtomLink.HRef">
            <summary>accessor method public Uri HRef</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.AtomLink.AbsoluteUri">
            <summary>public string AbsoluteUri</summary> 
        </member>
        <member name="P:Google.GData.Client.AtomLink.Rel">
            <summary>accessor method public string Rel</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.AtomLink.Type">
            <summary>accessor method public string Type</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.AtomLink.HRefLang">
            <summary>accessor method public string HrefLang</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.AtomLink.Length">
            <summary>accessor method public int Lenght</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.AtomLink.Title">
            <summary>accessor method public string Title</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.AtomLink.XmlName">
            <summary>Returns the constant representing this XML element.</summary> 
        </member>
        <member name="T:Google.GData.Client.AtomCategory">
            <summary>
            Category elements contain information about a category to which an Atom feed or entry is associated.
            atomCategory = element atom:category {
               atomCommonAttributes,
               attribute term { text },
               attribute scheme { atomUri }?,
               attribute label { text }?,
               empty
            }
            </summary> 
        </member>
        <member name="F:Google.GData.Client.AtomCategory.term">
            <summary>holds the term</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomCategory.scheme">
            <summary>holds the scheme as an Uri</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomCategory.label">
            <summary>holds the category label</summary> 
        </member>
        <member name="M:Google.GData.Client.AtomCategory.#ctor">
            <summary>empty Category constructor</summary> 
        </member>
        <member name="M:Google.GData.Client.AtomCategory.#ctor(System.String)">
            <summary>Category constructor</summary> 
            <param name="term">the term of the category</param>
        </member>
        <member name="M:Google.GData.Client.AtomCategory.#ctor(System.String,Google.GData.Client.AtomUri)">
            <summary>Category constructor</summary> 
            <param name="term">the term of the category</param>
            <param name="scheme">the scheme of the category</param>
        </member>
        <member name="M:Google.GData.Client.AtomCategory.SaveXmlAttributes(System.Xml.XmlWriter)">
            <summary>overridden to save attributes for this(XmlWriter writer)</summary> 
            <param name="writer">the xmlwriter to save into </param>
        </member>
        <member name="M:Google.GData.Client.AtomCategory.ShouldBePersisted">
            <summary>figures out if this object should be persisted</summary> 
            <returns> true, if it's worth saving</returns>
        </member>
        <member name="P:Google.GData.Client.AtomCategory.XmlName">
            <summary>Returns the constant representing this XML element.</summary> 
        </member>
        <member name="P:Google.GData.Client.AtomCategory.Term">
            <summary>accessor method public string Term</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.AtomCategory.Label">
            <summary>accessor method public string Label</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.AtomCategory.Scheme">
            <summary>accessor method public Uri Scheme</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.AtomCategory.UriString">
            <summary>creates a string rep of a category useful for a query URI</summary> 
            <returns>the category as a string for a query </returns>
        </member>
        <member name="T:Google.GData.Client.AtomIcon">
            <summary>atomIcon object representation. 
                The "atom:icon" element's content is an IRI reference [RFC3987] which identifies an image which provides 
                iconic visual identification for a feed.
                The image SHOULD have an aspect ratio of one (horizontal) to one (vertical), and SHOULD be suitable 
                for presentation at a small size.
            </summary> 
        </member>
        <member name="P:Google.GData.Client.AtomIcon.XmlName">
            <summary>Returns the constant representing this XML element.</summary> 
        </member>
        <member name="T:Google.GData.Client.AtomEntryConverter">
            <summary>TypeConverter, so that AtomEntry shows up in the property pages
            </summary> 
        </member>
        <member name="M:Google.GData.Client.AtomEntryConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>Standard type converter method</summary>
        </member>
        <member name="M:Google.GData.Client.AtomEntryConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>Standard type converter method</summary>
        </member>
        <member name="T:Google.GData.Client.AtomEntry">
            <summary>AtomEntry object, representing an item in the RSS/Atom feed
             Version 1.0 removed atom-Head
               element atom:entry {
                  atomCommonAttributes,
                  (atomAuthor*
                    atomCategory*
                   atomContent?
                   atomContributor*
                   atomId
                   atomLink*
                   atomPublished?
                   atomRights?
                   atomSource?
                   atomSummary?
                   atomTitle
                   atomUpdated
                   extensionElement*)
               }
             </summary>
        </member>
        <member name="F:Google.GData.Client.AtomEntry.title">
            <summary>/feed/entry/title property as string</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomEntry.id">
            <summary>/feed/entry/id property as string</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomEntry.links">
            <summary>/feed/entry/link collection</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomEntry.lastUpdateDate">
            <summary>/feed/entry/updated property as string</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomEntry.publicationDate">
            <summary>/feed/entry/published property as string</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomEntry.authors">
            <summary>/feed/entry/author property as Author object</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomEntry.contributors">
            <summary>/feed/entry/atomContributor property as Author object</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomEntry.rights">
            <summary>The "atom:rights" element is a Text construct that conveys a human-readable copyright statement for an entry or feed.</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomEntry.categories">
            <summary>/feed/entry/category/@term property as a list of AtomCategories</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomEntry.summary">
            <summary>The "atom:summary" element is a Text construct that conveys a short summary, abstract or excerpt of an entry.</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomEntry.content">
            <summary>contains the content as an object</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomEntry.source">
            <summary>atom:source element</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomEntry.service">
            <summary>GData service to use</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomEntry.feed">
            <summary>holds the owning feed</summary> 
        </member>
        <member name="M:Google.GData.Client.AtomEntry.AddOtherNamespaces(System.Xml.XmlWriter)">
            <summary>checks to see if we are a batch feed, if so, adds the batchNS</summary> 
            <param name="writer">the xmlwriter, where we want to add default namespaces to</param>
        </member>
        <member name="M:Google.GData.Client.AtomEntry.SkipNode(System.Xml.XmlNode)">
            <summary>checks if this is a namespace 
            decl that we already added</summary> 
            <param name="node">XmlNode to check</param>
            <returns>true if this node should be skipped </returns>
        </member>
        <member name="M:Google.GData.Client.AtomEntry.SaveInnerXml(System.Xml.XmlWriter)">
            <summary>saves the inner state of the element</summary> 
            <param name="writer">the xmlWriter to save into </param>
        </member>
        <member name="M:Google.GData.Client.AtomEntry.setFeed(Google.GData.Client.AtomFeed)">
            <summary>internal method to set the feed</summary> 
        </member>
        <member name="M:Google.GData.Client.AtomEntry.ImportFromFeed(Google.GData.Client.AtomEntry)">
            <summary>helper method to create a new, decoupled entry based on a feedEntry</summary> 
            <param name="entryToImport">the entry from a feed that you want to put somewhere else</param>
            <returns> the new entry ready to be inserted</returns>
        </member>
        <member name="M:Google.GData.Client.AtomEntry.FindDraftNode">
            <summary>searches the extension list for the app:draft node</summary> 
            <returns>null if not there</returns>
        </member>
        <member name="M:Google.GData.Client.AtomEntry.Update">
            <summary>commits the item to the server</summary> 
            <returns>throws an exception if an error occured updating, returns 
            the updated entry from the service</returns>
        </member>
        <member name="M:Google.GData.Client.AtomEntry.Delete">
            <summary>deletes the item from the server</summary> 
            <returns>throws an exception if an error occured updating</returns>
        </member>
        <member name="M:Google.GData.Client.AtomEntry.CopyEntry(Google.GData.Client.AtomEntry)">
            <summary>takes the updated entry returned and sets the properties to this object</summary> 
            <param name="updatedEntry"> </param>
        </member>
        <member name="M:Google.GData.Client.AtomEntry.CreateAtomSubElement(System.Xml.XmlReader,Google.GData.Client.AtomFeedParser)">
            <summary>
            this is the subclassing method for AtomBase derived 
            classes to overload what childelements should be created
            needed to create CustomLink type objects, like WebContentLink etc
            </summary>
            <param name="reader">The XmlReader that tells us what we are working with</param>
            <param name="parser">the parser is primarily used for nametable comparisons</param>
            <returns>AtomBase</returns>
        </member>
        <member name="M:Google.GData.Client.AtomEntry.BaseUriChanged(Google.GData.Client.AtomUri)">
            <summary>just go down the child collections</summary> 
            <param name="uriBase"> as currently calculated</param>
        </member>
        <member name="M:Google.GData.Client.AtomEntry.WalkTree(Google.GData.Client.IBaseWalkerAction)">
            <summary>calls the action on this object and all children</summary> 
            <param name="action">an IAtomBaseAction interface to call </param>
            <returns>true or false, pending outcome</returns>
        </member>
        <member name="P:Google.GData.Client.AtomEntry.XmlName">
            <summary>Returns the constant representing this XML element.</summary> 
        </member>
        <member name="P:Google.GData.Client.AtomEntry.Feed">
            <summary>Read only accessor for feed</summary> 
        </member>
        <member name="P:Google.GData.Client.AtomEntry.Service">
            <summary>accessor method for the GData Service to use</summary> 
        </member>
        <member name="P:Google.GData.Client.AtomEntry.BatchData">
            <summary>accessor to the batchdata for the entry</summary> 
            <returns> GDataBatch object </returns>
        </member>
        <member name="P:Google.GData.Client.AtomEntry.EditUri">
            <summary>accessor method public Uri EditUri</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.AtomEntry.SelfUri">
            <summary>accessor for the self URI</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.AtomEntry.MediaUri">
            <summary>accessor to find the edit-media link</summary> 
            <returns>the Uri as AtomUri to the media upload Service</returns>
        </member>
        <member name="P:Google.GData.Client.AtomEntry.AlternateUri">
            <summary>accessor to find the alternate link, in HTML only
            The method scans the link collection for a link that is of type rel=alternate
            and has a media type of HTML, otherwise it return NULL. The same is true for setting this. 
            If you need to use a rel/alternate with a different media type, you need
            to use the links collection directly</summary> 
            <returns>the Uri as AtomUri to HTML representation</returns>
        </member>
        <member name="P:Google.GData.Client.AtomEntry.FeedUri">
            <summary>accessor method public string Feed</summary> 
            <returns>returns the Uri as string for the feed service </returns>
        </member>
        <member name="P:Google.GData.Client.AtomEntry.Updated">
            <summary>accessor method public DateTime UpdateDate</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.AtomEntry.Published">
            <summary>accessor method public DateTime PublicationDate</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.AtomEntry.IsDraft">
            <summary>specifies if app:control/app:draft is yes or no. 
            this is determined by walking the extension elements collection</summary> 
            <returns>true if this is a draft element</returns>
        </member>
        <member name="P:Google.GData.Client.AtomEntry.Authors">
            <summary>accessor method public Contributors AtomPersonCollection</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.AtomEntry.Contributors">
            <summary>accessor method public Contributors AtomPersonCollection</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.AtomEntry.Content">
            <summary>accessor method public string Content</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.AtomEntry.Summary">
            <summary>accessor method public string Summary</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.AtomEntry.Links">
            <summary>accessor method public Links AtomLinkCollection</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.AtomEntry.Categories">
            <summary>holds an array of AtomCategory objects</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.AtomEntry.Id">
            <summary>accessor method public AtomId Id</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.AtomEntry.Title">
            <summary>accessor method public AtomTextConstruct Title</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.AtomEntry.Source">
            <summary>if the entry was copied, represents the source</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.AtomEntry.Rights">
            <summary>accessor method public string rights</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.AtomEntry.ReadOnly">
            <summary>returns whether or not the entry is read-only </summary> 
        </member>
        <member name="T:Google.GData.Client.AtomId">
            <summary>The "atom:id" element conveys a permanent, universally unique identifier for an entry or feed.
            </summary> 
        </member>
        <member name="M:Google.GData.Client.AtomId.#ctor">
            <summary>empty constructor</summary> 
        </member>
        <member name="M:Google.GData.Client.AtomId.#ctor(System.String)">
            <summary>public AtomId(string uri)</summary> 
            <param name="link">the URI for the ID</param>
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.AtomId.XmlName">
            <summary>Returns the constant representing this XML element.</summary> 
        </member>
        <member name="T:Google.GData.Client.AuthenticationException">
            <summary>standard exception class to be used when authentication 
            using Google Client Login fails
            </summary> 
        </member>
        <member name="M:Google.GData.Client.AuthenticationException.#ctor">
            <summary>default constructor so that FxCop does not complain</summary> 
        </member>
        <member name="M:Google.GData.Client.AuthenticationException.#ctor(System.String)">
            <summary>
            base constructor, takes a message text
            </summary> 
            <param name="msg"></param>
        </member>
        <member name="T:Google.GData.Client.InvalidCredentialsException">
            <summary>thrown when the credentials are wrong</summary> 
        </member>
        <member name="M:Google.GData.Client.InvalidCredentialsException.#ctor">
            <summary>default constructor so that FxCop does not complain</summary> 
        </member>
        <member name="M:Google.GData.Client.InvalidCredentialsException.#ctor(System.String)">
            <summary>constructor taking a descriptive string</summary> 
        </member>
        <member name="T:Google.GData.Client.AccountDeletedException">
            <summary>thrown when the account was deleted
            </summary> 
        </member>
        <member name="M:Google.GData.Client.AccountDeletedException.#ctor">
            <summary>default constructor so that FxCop does not complain</summary> 
        </member>
        <member name="M:Google.GData.Client.AccountDeletedException.#ctor(System.String)">
            <summary>constructor taking a descriptive string</summary> 
        </member>
        <member name="T:Google.GData.Client.AccountDisabledException">
            <summary>thrown when the account was disabled
            </summary> 
        </member>
        <member name="M:Google.GData.Client.AccountDisabledException.#ctor">
            <summary>default constructor so that FxCop does not complain</summary> 
        </member>
        <member name="M:Google.GData.Client.AccountDisabledException.#ctor(System.String)">
            <summary>constructor taking a descriptive string</summary> 
        </member>
        <member name="T:Google.GData.Client.NotVerifiedException">
            <summary>the account hoder was not verified
            </summary> 
        </member>
        <member name="M:Google.GData.Client.NotVerifiedException.#ctor">
            <summary>default constructor so that FxCop does not complain</summary> 
        </member>
        <member name="M:Google.GData.Client.NotVerifiedException.#ctor(System.String)">
            <summary>constructor taking a descriptive string</summary> 
        </member>
        <member name="T:Google.GData.Client.TermsNotAgreedException">
            <summary>The Terms were not agreed with..
            </summary> 
        </member>
        <member name="M:Google.GData.Client.TermsNotAgreedException.#ctor">
            <summary>default constructor so that FxCop does not complain</summary> 
        </member>
        <member name="M:Google.GData.Client.TermsNotAgreedException.#ctor(System.String)">
            <summary>constructor taking a descriptive string</summary> 
        </member>
        <member name="T:Google.GData.Client.ServiceUnavailableException">
            <summary>The service is current not available
            </summary> 
        </member>
        <member name="M:Google.GData.Client.ServiceUnavailableException.#ctor">
            <summary>default constructor so that FxCop does not complain</summary> 
        </member>
        <member name="M:Google.GData.Client.ServiceUnavailableException.#ctor(System.String)">
            <summary>constructor taking a descriptive string</summary> 
        </member>
        <member name="T:Google.GData.Client.CaptchaRequiredException">
            <summary>many unsuccessfull logins might create this...
            </summary> 
        </member>
        <member name="M:Google.GData.Client.CaptchaRequiredException.#ctor">
            <summary>default constructor so that FxCop does not complain</summary> 
        </member>
        <member name="M:Google.GData.Client.CaptchaRequiredException.#ctor(System.String,System.String,System.String)">
            <summary>constructor taking a descriptive string</summary> 
        </member>
        <member name="P:Google.GData.Client.CaptchaRequiredException.Url">
            <summary>Read only accessor for captchaUrl</summary> 
        </member>
        <member name="P:Google.GData.Client.CaptchaRequiredException.Token">
            <summary>Read only accessor for captchaToken</summary> 
        </member>
        <member name="T:Google.GData.Client.Utilities">
            <summary>String utilities
            </summary> 
        </member>
        <member name="F:Google.GData.Client.Utilities.XSDTrue">
            <summary>
            xsd version of bool:true
            </summary>
        </member>
        <member name="F:Google.GData.Client.Utilities.XSDFalse">
            <summary>
            xsd version of bool:false
            </summary>
        </member>
        <member name="M:Google.GData.Client.Utilities.#ctor">
            <summary>private constructor to prevent the compiler from generating a default one</summary> 
        </member>
        <member name="M:Google.GData.Client.Utilities.IsPersistable(System.String)">
            <summary>Little helper that checks if a string is XML persistable</summary> 
        </member>
        <member name="M:Google.GData.Client.Utilities.IsPersistable(Google.GData.Client.AtomUri)">
            <summary>Little helper that checks if a string is XML persistable</summary> 
        </member>
        <member name="M:Google.GData.Client.Utilities.IsPersistable(System.Int32)">
            <summary>Little helper that checks if an int is XML persistable</summary> 
        </member>
        <member name="M:Google.GData.Client.Utilities.IsPersistable(System.DateTime)">
            <summary>Little helper that checks if a datevalue is XML persistable</summary> 
        </member>
        <member name="M:Google.GData.Client.Utilities.ConvertBooleanToXSDString(System.Boolean)">
            <summary>
            .NET treats bool as True/False as the default
            string representation. XSD requires true/false
            this method encapsulates this
            </summary>
            <param name="flag">the boolean to convert</param>
            <returns>"true" or "false"</returns>
        </member>
        <member name="M:Google.GData.Client.Utilities.ConvertToXSDString(System.Object)">
            <summary>
            .NET treats bool as True/False as the default
            string representation. XSD requires true/false
            this method encapsulates this
            </summary>
            <param name="obj">the object to convert</param>
            <returns>the string representation</returns>
        </member>
        <member name="M:Google.GData.Client.Utilities.EncodeString(System.String)">
            <summary>helper to read in a string and Encode it</summary> 
            <param name="content">the xmlreader string</param>
            <returns>UTF8 encoded string</returns>
        </member>
        <member name="M:Google.GData.Client.Utilities.EncodeHtmlString(System.String)">
            <summary>helper to read in a string and Encode it</summary> 
            <param name="content">the xmlreader string</param>
            <returns>html encoded string</returns>
        </member>
        <member name="M:Google.GData.Client.Utilities.DecodedValue(System.String)">
            <summary>
            used as a cover method to hide the actual decoding implementation
            </summary>
            <param name="value">the string to decode</param>
        </member>
        <member name="M:Google.GData.Client.Utilities.UriEncodeReserved(System.String)">
            <summary>helper to read in a string and replace the reserved URI 
            characters with hex encoding</summary> 
            <param name="content">the parameter string</param>
            <returns>hex encoded string</returns>
        </member>
        <member name="M:Google.GData.Client.Utilities.LocalDateInUTC(System.DateTime)">
            <summary>Method to output just the date portion as string</summary>
            <param name="dateTime">the DateTime object to output as a string</param>
            <returns>an rfc-3339 string</returns>
        </member>
        <member name="M:Google.GData.Client.Utilities.LocalDateTimeInUTC(System.DateTime)">
            <summary>Method to output DateTime as string</summary>
            <param name="dateTime">the DateTime object to output as a string</param>
            <returns>an rfc-3339 string</returns>
        </member>
        <member name="M:Google.GData.Client.Utilities.FormatTimeOffset(System.TimeSpan)">
            <summary>Helper method to format a TimeSpan as a string compliant with the "time-offset" format defined in RFC-3339</summary>
            <param name="spanFromUtc">the TimeSpan to format</param>
            <returns></returns>
        </member>
        <member name="M:Google.GData.Client.Utilities.FormatNumOffset(System.TimeSpan)">
            <summary>Helper method to format a TimeSpan to {HH}:{MM}</summary>
            <param name="timeSpan">the TimeSpan to format</param>
            <returns>a string in "hh:mm" format.</returns>
        </member>
        <member name="M:Google.GData.Client.Utilities.CalculateUri(Google.GData.Client.AtomUri,Google.GData.Client.AtomUri,System.String)">
            <summary>public static string CalculateUri(string base, string inheritedBase, string local)</summary> 
            <param name="localBase">the baseUri from xml:base </param>
            <param name="inheritedBase">the pushed down baseUri from an outer element</param>
            <param name="localUri">the Uri value</param>
            <returns>the absolute Uri to use... </returns>
        </member>
        <member name="M:Google.GData.Client.Utilities.EnsureAtomNamespace(System.Xml.XmlWriter)">
            <summary>Sets the Atom namespace, if it's not already set.
            </summary> 
            <param name="writer"> the xmlwriter to use</param>
            <returns> the namespace prefix</returns>
        </member>
        <member name="M:Google.GData.Client.Utilities.EnsureGDataNamespace(System.Xml.XmlWriter)">
            <summary>Sets the gData namespace, if it's not already set.
            </summary> 
            <param name="writer"> the xmlwriter to use</param>
            <returns> the namespace prefix</returns>
        </member>
        <member name="M:Google.GData.Client.Utilities.EnsureGDataBatchNamespace(System.Xml.XmlWriter)">
            <summary>Sets the gDataBatch namespace, if it's not already set.
            </summary> 
            <param name="writer"> the xmlwriter to use</param>
            <returns> the namespace prefix</returns>
        </member>
        <member name="M:Google.GData.Client.Utilities.FindToken(Google.GData.Client.TokenCollection,System.String)">
            <summary>searches tokenCollection for a specific NEXT value. 
             The collection is assume to be a key/value pair list, so if A,B,C,D is the list
              A and C are keys, B and  D are values
            </summary> 
            <param name="tokens">the TokenCollection to search</param>
            <param name="key">the key to search for</param>
            <returns> the value string</returns>
        </member>
        <member name="M:Google.GData.Client.Utilities.ParseStreamInTokenCollection(System.IO.Stream)">
            <summary>converts a form response stream to a TokenCollection,
             by parsing the contents of the stream for newlines and equal signs
             the input stream is assumed to be an ascii encoded form resonse
            </summary> 
             <param name="inputStream">the stream to read and parse</param>
            <returns> the resulting TokenCollection </returns>
        </member>
        <member name="M:Google.GData.Client.Utilities.ParseValueFormStream(System.IO.Stream,System.String)">
            <summary>parses a form response stream in token form for a specific value
            </summary> 
            <param name="inputStream">the stream to read and parse</param>
            <param name="key">the key to search for</param>
            <returns> the string in the tokenized stream </returns>
        </member>
        <member name="M:Google.GData.Client.Utilities.FindExtension(System.Collections.ArrayList,System.String,System.String)">
            <summary>
            Finds a specific ExtensionElement based on it's local name
            and it's namespace. If namespace is NULL, the first one where
            the localname matches is found. If there are extensionelements that do 
            not implment ExtensionElementFactory, they will not be taken into account
            Primary use of this is to find XML nodes
            </summary>
            <param name="arrList">the array to search through</param>
            <param name="localName">the xml local name of the element to find</param>
            <param name="ns">the namespace of the elementToPersist</param>
            <returns>Object</returns>
        </member>
        <member name="M:Google.GData.Client.Utilities.FindExtensions(System.Collections.ArrayList,System.String,System.String,System.Collections.ArrayList)">
            <summary>
            Finds all ExtensionElement based on it's local name
            and it's namespace. If namespace is NULL, allwhere
            the localname matches is found. If there are extensionelements that do 
            not implment ExtensionElementFactory, they will not be taken into account
            Primary use of this is to find XML nodes
            </summary>
            <param name="arrList">the array to search through</param>
            <param name="localName">the xml local name of the element to find</param>
            <param name="ns">the namespace of the elementToPersist</param>
            <param name="arr">the array to fill</param>
            <returns>none</returns>
        </member>
        <member name="P:Google.GData.Client.Utilities.EmptyDate">
            <summary>returns a blank emptyDate. That's the default for an empty string date</summary> 
        </member>
        <member name="T:Google.GData.Client.TokenCollection">
            <summary>standard string tokenizer class. Pretty much cut/copy/paste out of 
            MSDN. 
            </summary> 
        </member>
        <member name="M:Google.GData.Client.TokenCollection.#ctor(System.String,System.Char[])">
            <summary>Constructor, takes a string and a delimiter set</summary> 
        </member>
        <member name="M:Google.GData.Client.TokenCollection.#ctor(System.String,System.Char,System.Boolean,System.Int32)">
            <summary>Constructor, takes a string and a delimiter set</summary> 
        </member>
        <member name="M:Google.GData.Client.TokenCollection.GetEnumerator">
            <summary>IEnumerable Interface Implementation, for the noninterface</summary> 
        </member>
        <member name="M:Google.GData.Client.TokenCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>IEnumerable Interface Implementation</summary> 
        </member>
        <member name="T:Google.GData.Client.TokenCollection.TokenEnumerator">
            <summary>Inner class implements IEnumerator interface</summary> 
        </member>
        <member name="M:Google.GData.Client.TokenCollection.TokenEnumerator.#ctor(Google.GData.Client.TokenCollection)">
            <summary>Standard constructor</summary> 
        </member>
        <member name="M:Google.GData.Client.TokenCollection.TokenEnumerator.MoveNext">
            <summary>IEnumerable::MoveNext implementation</summary> 
        </member>
        <member name="M:Google.GData.Client.TokenCollection.TokenEnumerator.Reset">
            <summary>IEnumerable::Reset implementation</summary> 
        </member>
        <member name="P:Google.GData.Client.TokenCollection.TokenEnumerator.Current">
            <summary>Current implementation, non interface, type-safe</summary> 
        </member>
        <member name="P:Google.GData.Client.TokenCollection.TokenEnumerator.System#Collections#IEnumerator#Current">
            <summary>Current implementation, interface, not type-safe</summary> 
        </member>
        <member name="T:Google.GData.Client.CompressionMode">
            <summary>Type of compression to use for the GZipStream. Currently only Decompress is supported.</summary>
        </member>
        <member name="F:Google.GData.Client.CompressionMode.Compress">
            <summary>Compresses the underlying stream.</summary>
        </member>
        <member name="F:Google.GData.Client.CompressionMode.Decompress">
            <summary>Decompresses the underlying stream.</summary>
        </member>
        <member name="T:Google.GData.Client.GZipStream">
            <summary>Provides methods and properties used to compress and decompress streams.</summary>
        </member>
        <member name="M:Google.GData.Client.GZipStream.#ctor(System.IO.Stream,Google.GData.Client.CompressionMode)">
            <summary>Initializes a new instance of the GZipStream class using the specified stream and CompressionMode value.</summary>
            <param name="stream">The stream to compress or decompress.</param>
            <param name="mode">One of the CompressionMode values that indicates the action to take.</param>
        </member>
        <member name="M:Google.GData.Client.GZipStream.Finalize">
            <summary>GZipStream destructor. Cleans all allocated resources.</summary>
        </member>
        <member name="M:Google.GData.Client.GZipStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>Reads a number of decompressed bytes into the specified byte array.</summary>
            <param name="array">The array used to store decompressed bytes.</param>
            <param name="offset">The location in the array to begin reading.</param>
            <param name="count">The number of bytes decompressed.</param>
            <returns>The number of bytes that were decompressed into the byte array. If the end of the stream has been reached, zero or the number of bytes read is returned.</returns>
        </member>
        <member name="M:Google.GData.Client.GZipStream.Close">
            <summary>Closes the current stream and releases any resources (such as sockets and file handles) associated with the current stream.</summary>
        </member>
        <member name="M:Google.GData.Client.GZipStream.Flush">
            <summary>Flushes the contents of the internal buffer of the current GZipStream object to the underlying stream.</summary>
        </member>
        <member name="M:Google.GData.Client.GZipStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>This property is not supported and always throws a NotSupportedException.</summary>
            <param name="offset">The location in the stream.</param>
            <param name="origin">One of the SeekOrigin values.</param>
            <returns>A long value.</returns>
        </member>
        <member name="M:Google.GData.Client.GZipStream.SetLength(System.Int64)">
            <summary>This property is not supported and always throws a NotSupportedException.</summary>
            <param name="value">The length of the stream.</param>
        </member>
        <member name="M:Google.GData.Client.GZipStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>This property is not supported and always throws a NotSupportedException.</summary>
            <param name="array">The array used to store compressed bytes.</param>
            <param name="offset">The location in the array to begin reading.</param>
            <param name="count">The number of bytes compressed.</param>
        </member>
        <member name="P:Google.GData.Client.GZipStream.CanRead">
            <summary>Gets a value indicating whether the stream supports reading while decompressing a file.</summary>
        </member>
        <member name="P:Google.GData.Client.GZipStream.CanWrite">
            <summary>Gets a value indicating whether the stream supports writing.</summary>
        </member>
        <member name="P:Google.GData.Client.GZipStream.CanSeek">
            <summary>Gets a value indicating whether the stream supports seeking.</summary>
        </member>
        <member name="P:Google.GData.Client.GZipStream.BaseStream">
            <summary>Gets a reference to the underlying stream.</summary>
        </member>
        <member name="P:Google.GData.Client.GZipStream.Length">
            <summary>This property is not supported and always throws a NotSupportedException.</summary>
        </member>
        <member name="P:Google.GData.Client.GZipStream.Position">
            <summary>This property is not supported and always throws a NotSupportedException.</summary>
        </member>
        <member name="T:Google.GData.Client.GoogleAuthentication">
            <summary>constants for the authentication handler
            </summary> 
        </member>
        <member name="F:Google.GData.Client.GoogleAuthentication.AccountPrefix">
             <summary>account prefix path </summary>
        </member>
        <member name="F:Google.GData.Client.GoogleAuthentication.DefaultProtocol">
             <summary>protocol  </summary>
        </member>
        <member name="F:Google.GData.Client.GoogleAuthentication.DefaultDomain">
            <summary>
            default authentication domain
            </summary>
        </member>
        <member name="F:Google.GData.Client.GoogleAuthentication.UriHandler">
            <summary>Google client authentication handler</summary>
        </member>
        <member name="F:Google.GData.Client.GoogleAuthentication.Email">
            <summary>Google client authentication email</summary>
        </member>
        <member name="F:Google.GData.Client.GoogleAuthentication.Password">
            <summary>Google client authentication password</summary>
        </member>
        <member name="F:Google.GData.Client.GoogleAuthentication.Source">
            <summary>Google client authentication source constant</summary>
        </member>
        <member name="F:Google.GData.Client.GoogleAuthentication.Service">
            <summary>Google client authentication default service constant</summary>
        </member>
        <member name="F:Google.GData.Client.GoogleAuthentication.Lsid">
            <summary>Google client authentication LSID</summary>
        </member>
        <member name="F:Google.GData.Client.GoogleAuthentication.Ssid">
            <summary>Google client authentication SSID</summary>
        </member>
        <member name="F:Google.GData.Client.GoogleAuthentication.AuthToken">
            <summary>Google client authentication Token</summary>
        </member>
        <member name="F:Google.GData.Client.GoogleAuthentication.AuthSubToken">
            <summary>Google authSub authentication Token</summary>
        </member>
        <member name="F:Google.GData.Client.GoogleAuthentication.Header">
            <summary>Google client header</summary>
        </member>
        <member name="F:Google.GData.Client.GoogleAuthentication.Override">
            <summary>Google method override header</summary>
        </member>
        <member name="F:Google.GData.Client.GoogleAuthentication.WebKey">
            <summary>Google webkey identifier</summary>
        </member>
        <member name="F:Google.GData.Client.GoogleAuthentication.AccountType">
            <summary>Google webkey identifier</summary>
        </member>
        <member name="F:Google.GData.Client.GoogleAuthentication.AccountTypeDefault">
            <summary>default value for the account type</summary>
        </member>
        <member name="F:Google.GData.Client.GoogleAuthentication.CaptchaAnswer">
            <summary>captcha url token</summary>
        </member>
        <member name="F:Google.GData.Client.GoogleAuthentication.CaptchaToken">
            <summary>default value for the account type</summary>
        </member>
        <member name="T:Google.GData.Client.DocumentQuery">
            <summary>
            A subclass of FeedQuery, to create a document based query URI.
            Provides public properties that describe the different
            aspects of the URI, as well as a composite URI.
            </summary>
        </member>
        <member name="M:Google.GData.Client.DocumentQuery.#ctor(System.String)">
            <summary>
            Constructor - Sets the base URI
            </summary>
            <param name="baseUri"></param>
        </member>
        <member name="M:Google.GData.Client.DocumentQuery.ParseUri(System.Uri)">
            <summary>
            Parses an incoming URI string and sets the instance variables
            of this object.
            </summary>
            <param name="targetUri">Takes an incoming Uri string and parses all the properties of it</param>
            <returns>Throws a query exception when it finds something wrong with the input, otherwise returns a baseuri.</returns>
        </member>
        <member name="M:Google.GData.Client.DocumentQuery.Reset">
            <summary>
            Resets object state to default, as if newly created.
            </summary>
        </member>
        <member name="M:Google.GData.Client.DocumentQuery.CalculateQuery">
            <summary>
            Creates the partial URI query string based on all set properties.
            </summary>
            <returns> string => the query part of the URI </returns>
        </member>
        <member name="P:Google.GData.Client.DocumentQuery.Title">
            <summary>
            The exact or unexact title to query for.
            </summary>
        </member>
        <member name="P:Google.GData.Client.DocumentQuery.Exact">
            <summary>
            If true, then only the exact title string will be looked for.
            </summary>
        </member>
        <member name="T:Google.GData.Client.ServiceEventArgs">
            <summary>
            EventArgument class for service level events during parsing
            </summary>
        </member>
        <member name="M:Google.GData.Client.ServiceEventArgs.#ctor(System.Uri,Google.GData.Client.IService)">
            <summary>
            constructor. Takes the URI and the service this event applies to
            </summary>
            <param name="uri">URI currently executed</param>
            <param name="service">service object doing the execution</param>
        </member>
        <member name="P:Google.GData.Client.ServiceEventArgs.Feed">
            <summary>the feed to be created. If this is NULL, a service 
            will create a DEFAULT atomfeed</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.ServiceEventArgs.Service">
            <summary>the service to be used for the feed to be created. </summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.ServiceEventArgs.Uri">
            <summary>the Uri to be used</summary> 
            <returns> </returns>
        </member>
        <member name="T:Google.GData.Client.ServiceEventHandler">
            <summary>Delegate declaration for the feed creation in a service</summary> 
        </member>
        <member name="T:Google.GData.Client.Service">
            <summary>base Service implementation
            </summary> 
        </member>
        <member name="F:Google.GData.Client.Service.GServiceAgent">
            <summary>this service's user-agent</summary> 
        </member>
        <member name="F:Google.GData.Client.Service.credentials">
            <summary>holds the credential information</summary> 
        </member>
        <member name="F:Google.GData.Client.Service.GDataRequestFactory">
            <summary>the GDatarequest to use</summary> 
        </member>
        <member name="M:Google.GData.Client.Service.#ctor">
            <summary>default constructor, sets the default GDataRequest</summary> 
        </member>
        <member name="M:Google.GData.Client.Service.#ctor(System.String)">
            <summary>default constructor, sets the default GDataRequest</summary> 
        </member>
        <member name="M:Google.GData.Client.Service.#ctor(System.String,System.String)">
            <summary>this will trigger the creation of an authenticating service</summary> 
        </member>
        <member name="M:Google.GData.Client.Service.#ctor(System.String,System.String,System.String)">
            <summary>this will trigger the creation of an authenticating servicea</summary> 
        </member>
        <member name="M:Google.GData.Client.Service.OnRequestFactoryChanged">
            <summary>
            notifier if someone changes the requestfactory of the service
            </summary>
        </member>
        <member name="M:Google.GData.Client.Service.QueryAuthenticationToken">
            <summary>
            if the service is using a Google Request Factory it will use that 
            assuming credentials are set to retrieve the authentication token
            for those credentials
            </summary>
            <returns>string</returns>
        </member>
        <member name="M:Google.GData.Client.Service.SetAuthenticationToken(System.String)">
            <summary>
            if the service is using a Google Request Factory it will set the passed 
            in token to the factory
            </summary>
            <returns>string</returns>
        </member>
        <member name="M:Google.GData.Client.Service.Query(System.Uri)">
            <summary>the basic interface. Take a URI and just get it</summary> 
            <param name="queryUri">the URI to execute</param>
            <returns> a webresponse object</returns>
        </member>
        <member name="M:Google.GData.Client.Service.setUserCredentials(System.String,System.String)">
            <summary>
            Sets the credentials of the user to authenticate requests
            to the server.
            </summary>
            <param name="username"></param>
            <param name="password"></param>
        </member>
        <member name="M:Google.GData.Client.Service.Get(System.String)">
            <summary>
            Returns a single Atom entry based upon its unique URI.
            </summary>
            <param name="entryUri">The URI of the Atom entry.</param>
            <returns>AtomEntry representing the entry.</returns>
        </member>
        <member name="M:Google.GData.Client.Service.Query(Google.GData.Client.FeedQuery)">
            <summary>executes the query and returns an AtomFeed object tree</summary> 
            <param name="feedQuery">the query parameters as a FeedQuery object </param>
            <returns>AtomFeed object tree</returns>
        </member>
        <member name="M:Google.GData.Client.Service.QueryOpenSearchRssDescription(System.Uri)">
            <summary>object QueryOpenSearchRssDescription()</summary> 
            <param name="serviceUri">the service to ask for an OpenSearchRss Description</param> 
            <returns> a webresponse object</returns>
        </member>
        <member name="M:Google.GData.Client.Service.Update(Google.GData.Client.AtomEntry)">
            <summary>WebResponse Update(Uri updateUri, Stream entryStream, ICredentials credentials)</summary> 
            <param name="entry">the old entry to update</param> 
            <returns> the new Entry, as returned from the server</returns>
        </member>
        <member name="M:Google.GData.Client.Service.Insert(Google.GData.Client.AtomFeed,Google.GData.Client.AtomEntry)">
            <summary>public WebResponse Insert(Uri insertUri, Stream entryStream, ICredentials credentials)</summary> 
            <param name="feed">the feed this entry should be inserted into</param> 
            <param name="entry">the entry to be inserted</param> 
            <returns> the inserted entry</returns>
        </member>
        <member name="M:Google.GData.Client.Service.Insert(System.Uri,Google.GData.Client.AtomEntry)">
            <summary>public WebResponse Insert(Uri insertUri, Stream entryStream, ICredentials credentials)</summary> 
            <param name="feedUri">the uri for the feed this entry should be inserted into</param> 
            <param name="newEntry">the entry to be inserted</param> 
            <returns> the inserted entry</returns>
        </member>
        <member name="M:Google.GData.Client.Service.Update(System.Uri,System.IO.Stream,System.String,System.String)">
            <summary>
            simple update for media resources
            </summary>
            <param name="uriTarget"></param>
            <param name="input"></param>
            <param name="contentType"></param>
            <param name="slugHeader">the value for the slug header, indicating filenaming</param>
            <returns>AtomEntry</returns>
        </member>
        <member name="M:Google.GData.Client.Service.Insert(System.Uri,System.IO.Stream,System.String,System.String)">
            <summary>
            Simple insert for media resources
            </summary>
            <param name="uriTarget"></param>
            <param name="input"></param>
            <param name="contentType"></param>
            <param name="slugHeader">the value for the slug header, indicating filenaming</param>
            <returns>AtomEntry</returns>
        </member>
        <member name="M:Google.GData.Client.Service.StreamInsert(System.Uri,Google.GData.Client.AtomEntry)">
            <summary>public WebResponse Insert(Uri insertUri, Stream entryStream, ICredentials credentials)</summary> 
            <param name="feedUri">the uri for the feed this entry should be inserted into</param> 
            <param name="newEntry">the entry to be inserted</param> 
            <returns> the inserted entry</returns>
        </member>
        <member name="M:Google.GData.Client.Service.StreamInsert(System.Uri,Google.GData.Client.AtomBase,Google.GData.Client.GDataRequestType)">
            <summary>Inserts an AtomBase entry against a Uri</summary> 
            <param name="feedUri">the uri for the feed this object should be posted against</param> 
            <param name="baseEntry">the entry to be inserted</param> 
            <param name="type">the type of request to create</param> 
            <returns> the response as a stream</returns>
        </member>
        <member name="M:Google.GData.Client.Service.StringSend(System.Uri,System.String,Google.GData.Client.GDataRequestType)">
            <summary>
            this is a helper function for external utilities. It is not worth
            running the other insert/saves through here, as this would involve
            double buffering/copying of the bytes
            </summary>
            <param name="targetUri"></param>
            <param name="payload"></param>
            <param name="type"></param>
            <returns>Stream</returns>
        </member>
        <member name="M:Google.GData.Client.Service.StreamSend(System.Uri,System.IO.Stream,Google.GData.Client.GDataRequestType,System.String,System.String)">
            <summary>
            this is a helper function for to send binary data to a resource
            it is not worth running the other insert/saves through here, as this would involve
            double buffering/copying of the bytes
            </summary>
            <param name="targetUri"></param>
            <param name="inputStream"></param>
            <param name="type"></param>
            <param name="contentType">the contenttype to use in the request, if NULL is passed, factory default is used</param>
            <param name="slugHeader">the slugHeader to use in the request, if NULL is passed, factory default is used</param>
            <returns>Stream</returns>
        </member>
        <member name="M:Google.GData.Client.Service.createFeed(System.Uri)">
             <summary>creates a new feed instance to be returned by
             Batch(), Query() and other operations
            
             Subclasses can supply their own feed implementation by
             overriding this method.
             </summary>
        </member>
        <member name="M:Google.GData.Client.Service.Batch(Google.GData.Client.AtomFeed,System.Uri)">
            <summary>
            takes a given feed, and does a batch post of that feed
            against the batchUri parameter. If that one is NULL 
            it will try to use the batch link URI in the feed
            </summary>
            <param name="feed">the feed to post</param>
            <param name="batchUri">the URI to user</param>
            <returns>the returned AtomFeed</returns>
        </member>
        <member name="M:Google.GData.Client.Service.Delete(Google.GData.Client.AtomEntry)">
            <summary>deletes an Atom entry object</summary> 
            <param name="entry"> </param>
        </member>
        <member name="M:Google.GData.Client.Service.Delete(System.Uri)">
            <summary>Deletes an Atom entry when given a Uri</summary>
            <param name="uri"></param>
        </member>
        <member name="M:Google.GData.Client.Service.OnParsedNewEntry(System.Object,Google.GData.Client.FeedParserEventArgs)">
            <summary>eventchaining. We catch this by the baseFeedParsers, which 
            would not do anything with the gathered data. We pass the event up
            to the user</summary> 
            <param name="sender"> the object which send the event</param>
            <param name="e">FeedParserEventArguments, holds the feedentry</param> 
            <returns> </returns>
        </member>
        <member name="M:Google.GData.Client.Service.OnNewExtensionElement(System.Object,Google.GData.Client.ExtensionElementEventArgs)">
            <summary>eventchaining. We catch this by the baseFeedParsers, which 
            would not do anything with the gathered data. We pass the event up
            to the user, and if he did not dicscard it, we add the entry to our
            collection</summary> 
            <param name="sender"> the object which send the event</param>
            <param name="e">FeedParserEventArguments, holds the feedentry</param> 
            <returns> </returns>
        </member>
        <member name="E:Google.GData.Client.Service.NewAtomEntry">
            <summary>holds the hooks for the eventing in the feedparser</summary> 
        </member>
        <member name="E:Google.GData.Client.Service.NewExtensionElement">
            <summary>eventhandler, when the parser finds a new extension element-> mirrored from underlying parser</summary> 
        </member>
        <member name="E:Google.GData.Client.Service.NewFeed">
            <summary>eventhandler, when the service needs to create a new feed</summary> 
        </member>
        <member name="P:Google.GData.Client.Service.RequestFactory">
            <summary>accessor method public IGDataRequest Request</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.Service.Credentials">
            <summary>accessor method public ICredentials Credentials</summary> 
            <returns> </returns>
        </member>
        <member name="T:Google.GData.Client.AtomTextConstructElementType">
            <summary>enum to define the AtomTextConstructs Type...</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomTextConstructElementType.Rights">
            <summary>this is a Right element</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomTextConstructElementType.Title">
            <summary>this is a title element</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomTextConstructElementType.Subtitle">
            <summary>this is a subtitle element</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomTextConstructElementType.Summary">
            <summary>this is a summary element</summary> 
        </member>
        <member name="T:Google.GData.Client.AtomTextConstructType">
            <summary>enum to define the AtomTextConstructs Type...</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomTextConstructType.text">
            <summary>defines standard text</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomTextConstructType.html">
            <summary>defines html text</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomTextConstructType.xhtml">
            <summary>defines xhtml text</summary> 
        </member>
        <member name="T:Google.GData.Client.AtomTextConstructConverter">
            <summary>TypeConverter, so that AtomTextConstruct shows up in the property pages
            </summary> 
        </member>
        <member name="M:Google.GData.Client.AtomTextConstructConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>Standard type converter method</summary>
        </member>
        <member name="M:Google.GData.Client.AtomTextConstructConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>Standard type converter method</summary>
        </member>
        <member name="T:Google.GData.Client.AtomTextConstruct">
            <summary>AtomTextConstruct object representation
            A Text construct contains human-readable text, usually in small quantities. 
            The content of Text constructs is Language-Sensitive.
            </summary> 
        </member>
        <member name="F:Google.GData.Client.AtomTextConstruct.type">
            <summary>holds the type of the text</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomTextConstruct.text">
            <summary>holds the text as string</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomTextConstruct.elementType">
            <summary>holds the element type</summary> 
        </member>
        <member name="M:Google.GData.Client.AtomTextConstruct.#ctor">
            <summary>the public constructor only exists for the pleasure of property pages</summary> 
        </member>
        <member name="M:Google.GData.Client.AtomTextConstruct.#ctor(Google.GData.Client.AtomTextConstructElementType)">
            <summary>constructor indicating the elementtype</summary> 
            <param name="elementType">holds the xml elementype</param>
        </member>
        <member name="M:Google.GData.Client.AtomTextConstruct.#ctor(Google.GData.Client.AtomTextConstructElementType,System.String)">
            <summary>constructor indicating the elementtype</summary> 
            <param name="elementType">holds the xml elementype</param>
            <param name="text">holds the text string</param>
        </member>
        <member name="M:Google.GData.Client.AtomTextConstruct.SaveXmlAttributes(System.Xml.XmlWriter)">
            <summary>overridden to save attributes for this(XmlWriter writer)</summary> 
            <param name="writer">the xmlwriter to save into </param>
        </member>
        <member name="M:Google.GData.Client.AtomTextConstruct.SaveInnerXml(System.Xml.XmlWriter)">
            <summary>saves the inner state of the element</summary> 
            <param name="writer">the xmlWriter to save into </param>
        </member>
        <member name="M:Google.GData.Client.AtomTextConstruct.ShouldBePersisted">
            <summary>figures out if this object should be persisted</summary> 
            <returns> true, if it's worth saving</returns>
        </member>
        <member name="P:Google.GData.Client.AtomTextConstruct.Type">
            <summary>accessor method public AtomTextConstructType Type</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.AtomTextConstruct.Text">
            <summary>accessor method public string Text</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.AtomTextConstruct.XmlName">
            <summary>Returns the constant representing this XML element.</summary> 
        </member>
        <member name="T:Google.GData.Client.FeedParserEventArgs">
            <summary>Parsing event class...
            </summary> 
        </member>
        <member name="M:Google.GData.Client.FeedParserEventArgs.#ctor">
            <summary>constructor for the feedParser events - this one is only used
            to ask for a new entry</summary> 
        </member>
        <member name="M:Google.GData.Client.FeedParserEventArgs.#ctor(Google.GData.Client.AtomFeed,Google.GData.Client.AtomEntry)">
            <summary>constructor for the feedParser events</summary> 
            <param name="feed">the feed to use </param>
            <param name="entry">the feedentry to use </param> 
        </member>
        <member name="P:Google.GData.Client.FeedParserEventArgs.DiscardEntry">
            <summary>the eventhandler can set this to discard the entry</summary> 
        </member>
        <member name="P:Google.GData.Client.FeedParserEventArgs.DoneParsing">
            <summary>Read only accessor for done</summary> 
        </member>
        <member name="P:Google.GData.Client.FeedParserEventArgs.CreatingEntry">
            <summary>Read only accessor for creating an entry</summary> 
        </member>
        <member name="P:Google.GData.Client.FeedParserEventArgs.Entry">
            <summary>the newly created entry obect</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.FeedParserEventArgs.Feed">
            <summary>accessor method public Feed Feed</summary> 
            <returns> </returns>
        </member>
        <member name="T:Google.GData.Client.ExtensionElementEventArgs">
            <summary>extension element event class
            </summary> 
        </member>
        <member name="P:Google.GData.Client.ExtensionElementEventArgs.DiscardEntry">
            <summary>the eventhandler can set this to discard the entry</summary> 
        </member>
        <member name="P:Google.GData.Client.ExtensionElementEventArgs.ExtensionElement">
            <summary>accessor method public XmlNode ExtensionElement</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.ExtensionElementEventArgs.Base">
            <summary>accessor method public AtomBase Base</summary> 
            <returns> </returns>
        </member>
        <member name="T:Google.GData.Client.FeedParserEventHandler">
            <summary>Delegate declaration for the parsing eventhandler</summary> 
        </member>
        <member name="T:Google.GData.Client.ExtensionElementEventHandler">
            <summary>Delegate declaration for the extension eventhandler</summary> 
        </member>
        <member name="T:Google.GData.Client.AuthSubUtil">
            <summary>helper class for communications between a 3rd party site and Google using the AuthSub protocol
            </summary> 
        </member>
        <member name="M:Google.GData.Client.AuthSubUtil.getRequestUrl(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>Creates the request URL to be used to retrieve an AuthSub 
            token. On success, the user will be redirected to the continue URL 
            with the AuthSub token appended to the URL.
            Use getTokenFromReply(String) to retrieve the token from the reply.
            </summary> 
            <param name="continueUrl">the URL to redirect to on successful 
            token retrieval</param>
            <param name="scope">the scope of the requested AuthSub token</param>
            <param name="secure">if the token will be used securely</param>
            <param name="session"> if the token will be exchanged for a
             session cookie</param>
            <returns>the URL to be used to retrieve the AuthSub token</returns>
        </member>
        <member name="M:Google.GData.Client.AuthSubUtil.getRequestUrl(System.String,System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>Creates the request URL to be used to retrieve an AuthSub 
            token. On success, the user will be redirected to the continue URL 
            with the AuthSub token appended to the URL.
            Use getTokenFromReply(String) to retrieve the token from the reply.
            </summary> 
            <param name="protocol">the protocol to use to communicate with the 
            server</param>
            <param name="domain">the domain at which the authentication server 
            exists</param>
            <param name="continueUrl">the URL to redirect to on successful 
            token retrieval</param>
            <param name="scope">the scope of the requested AuthSub token</param>
            <param name="secure">if the token will be used securely</param>
            <param name="session"> if the token will be exchanged for a
             session cookie</param>
            <returns>the URL to be used to retrieve the AuthSub token</returns>
        </member>
        <member name="M:Google.GData.Client.AuthSubUtil.getRequestUrl(System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>Creates the request URL to be used to retrieve an AuthSub 
            token. On success, the user will be redirected to the continue URL 
            with the AuthSub token appended to the URL.
            Use getTokenFromReply(String) to retrieve the token from the reply.
            </summary> 
            <param name="protocol">the protocol to use to communicate with the 
            server</param>
            <param name="domain">the domain at which the authentication server 
            exists</param>
            <param name="handler">the location of the authentication handler
             (defaults to "/accounts/AuthSubRequest".</param>
            <param name="continueUrl">the URL to redirect to on successful 
            token retrieval</param>
            <param name="scope">the scope of the requested AuthSub token</param>
            <param name="secure">if the token will be used securely</param>
            <param name="session"> if the token will be exchanged for a
             session cookie</param>
            <returns>the URL to be used to retrieve the AuthSub token</returns>
        </member>
        <member name="M:Google.GData.Client.AuthSubUtil.addParameter(System.Text.StringBuilder,System.String,System.String)">
            <summary> 
            Adds the query parameter with the given name and value to the URL.
            </summary> 
        </member>
        <member name="M:Google.GData.Client.AuthSubUtil.getSessionTokenUrl">
            <summary>
            Returns the URL to use to exchange the one-time-use token for
             a session token.
            </summary> 
            <returns>the URL to exchange for the session token</returns>
        </member>
        <member name="M:Google.GData.Client.AuthSubUtil.getSessionTokenUrl(System.String,System.String)">
            <summary>
            Returns the URL to use to exchange the one-time-use token for
             a session token.
            </summary> 
            <param name="protocol">the protocol to use to communicate with
            the server</param>
            <param name="domain">the domain at which the authentication server 
            exists</param>
            <returns>the URL to exchange for the session token</returns>
        </member>
        <member name="M:Google.GData.Client.AuthSubUtil.getTokenFromReply(System.Uri)">
            <summary>
             Parses and returns the AuthSub token returned by Google on a successful
             AuthSub login request.  The token will be appended as a query parameter
            to the continue URL specified while making the AuthSub request.
            </summary> 
            <param name="uri">The reply URI to parse </param>
            <returns>the token value of the URI, or null if none </returns>
        </member>
        <member name="M:Google.GData.Client.AuthSubUtil.exchangeForSessionToken(System.String,System.Security.Cryptography.AsymmetricAlgorithm)">
            <summary>
            Exchanges the one time use token returned in the URL for a session
            token. If the key is non-null, the token will be used securely, 
            and the request will be signed
            </summary> 
            <param name="onetimeUseToken">the token send by google in the URL</param>
            <param name="key">the private key used to sign</param>
            <returns>the session token</returns>
        </member>
        <member name="M:Google.GData.Client.AuthSubUtil.exchangeForSessionToken(System.String,System.String,System.String,System.Security.Cryptography.AsymmetricAlgorithm)">
            <summary>
            Exchanges the one time use token returned in the URL for a session
            token. If the key is non-null, the token will be used securely, 
            and the request will be signed
            </summary> 
            <param name="protocol">the protocol to use to communicate with the 
            server</param>
            <param name="domain">the domain at which the authentication server 
            exists</param>
            <param name="onetimeUseToken">the token send by google in the URL</param>
            <param name="key">the private key used to sign</param>
            <returns>the session token</returns>
        </member>
        <member name="M:Google.GData.Client.AuthSubUtil.formAuthorizationHeader(System.String,System.Security.Cryptography.AsymmetricAlgorithm,System.Uri,System.String)">
            <summary>Forms the AuthSub authorization header.
            if key is null, the token will be in insecure mode, otherwise 
            the token will be used securely and the header contains
            a signature
            </summary> 
            <param name="token">the AuthSub token to use </param>
            <param name="key">the private key to used </param>
            <param name="requestUri">the request uri to use </param>
            <param name="requestMethod">the HTTP method to use </param>
            <returns>the authorization header </returns>
        </member>
        <member name="M:Google.GData.Client.AuthSubUtil.generateULONGRnd">
            <summary>creates a max 20 character long string of random numbers</summary>
            <returns> the string containing random numbers</returns>
        </member>
        <member name="M:Google.GData.Client.AuthSubUtil.sign(System.String,System.Security.Cryptography.AsymmetricAlgorithm)">
            <summary>signs the data with the given key</summary>
            <param name="dataToSign">the data to sign </param>
            <param name="key">the private key to used </param>
            <returns> the signed data</returns>
        </member>
        <member name="T:Google.GData.Client.AbstractFeed">
            <summary>Base class to read gData feeds in Atom, with the extension of
            setting up extension element parsing
            </summary> 
        </member>
        <member name="M:Google.GData.Client.AbstractFeed.#ctor(System.Uri,Google.GData.Client.IService)">
            <summary>
            Constructor, set's up extension handlers
            </summary>
            <param name="uriBase">The uri for this cells feed.</param>
            <param name="iService">The Spreadsheets service.</param>
        </member>
        <member name="M:Google.GData.Client.AbstractFeed.AddOtherNamespaces(System.Xml.XmlWriter)">
            <summary>extension feeds most likely add the GData namespace, so let's 
            have a default implementation that does this</summary> 
            <param name="writer">the xmlwriter, where we want to add default namespaces to</param>
        </member>
        <member name="M:Google.GData.Client.AbstractFeed.SkipNode(System.Xml.XmlNode)">
            <summary>checks if this is a namespace 
            decl that we already added. As the abstract feed adds
            the GData namespace, check that one</summary> 
            <param name="node">XmlNode to check</param>
            <returns>true if this node should be skipped </returns>
        </member>
        <member name="M:Google.GData.Client.AbstractFeed.OnParsedNewAbstractEntry(System.Object,Google.GData.Client.FeedParserEventArgs)">
            <summary>
            Eventhandling. Called when a new entry is parsed.
            </summary>
            <param name="sender"> the object which send the event</param>
            <param name="e">FeedParserEventArguments, holds the feedentry</param> 
            <returns> </returns>
        </member>
        <member name="M:Google.GData.Client.AbstractFeed.CreateFeedEntry">
            <summary>
            this needs to get implemented by subclasses
            </summary>
            <returns>AtomEntry</returns>
        </member>
        <member name="M:Google.GData.Client.AbstractFeed.OnNewExtensionsElement(System.Object,Google.GData.Client.ExtensionElementEventArgs)">
            <summary>eventhandler - called for event extension element
            </summary>
            <param name="sender">the object which send the event</param>
            <param name="e">FeedParserEventArguments, holds the feedEntry</param> 
            <returns> </returns>
        </member>
        <member name="M:Google.GData.Client.AbstractFeed.HandleExtensionElements(Google.GData.Client.ExtensionElementEventArgs,Google.GData.Client.AtomFeedParser)">
            <summary>
            event on the Feed to handle extension elements during parsing
            </summary>
            <param name="e">the event arguments</param>
            <param name="parser">the parser that caused this</param>
        </member>
        <member name="T:Google.GData.Client.GDataLoggingRequestFactory">
            <summary>base GDataRequestFactory implmentation</summary> 
        </member>
        <member name="F:Google.GData.Client.GDataLoggingRequestFactory.strInput">
            <summary>holds the filename for the input request</summary> 
        </member>
        <member name="F:Google.GData.Client.GDataLoggingRequestFactory.strOutput">
            <summary>holds the filename for the output response</summary> 
        </member>
        <member name="F:Google.GData.Client.GDataLoggingRequestFactory.strCombined">
            <summary>holds the filename for the combined logger</summary> 
        </member>
        <member name="M:Google.GData.Client.GDataLoggingRequestFactory.#ctor(System.String,System.String)">
            <summary>default constructor</summary> 
        </member>
        <member name="M:Google.GData.Client.GDataLoggingRequestFactory.#ctor(System.String,System.String,System.String)">
            <summary>default constructor</summary> 
        </member>
        <member name="M:Google.GData.Client.GDataLoggingRequestFactory.CreateRequest(Google.GData.Client.GDataRequestType,System.Uri)">
            <summary>default constructor</summary> 
        </member>
        <member name="P:Google.GData.Client.GDataLoggingRequestFactory.RequestFileName">
            <summary>accessor method public string RequestFileName</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.GDataLoggingRequestFactory.ResponseFileName">
            <summary>accessor method public string ResponseFileName</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.GDataLoggingRequestFactory.CombinedLogFileName">
            <summary>accessor method public string CombinedLogFileName</summary> 
            <returns> </returns>
        </member>
        <member name="T:Google.GData.Client.GDataLoggingRequest">
            <summary>base GDataRequest implementation</summary> 
        </member>
        <member name="F:Google.GData.Client.GDataLoggingRequest.strInput">
            <summary>holds the filename for the input request</summary> 
        </member>
        <member name="F:Google.GData.Client.GDataLoggingRequest.strOutput">
            <summary>holds the filename for the output response</summary> 
        </member>
        <member name="F:Google.GData.Client.GDataLoggingRequest.strCombined">
            <summary>holds the filename for the combined logger</summary> 
        </member>
        <member name="F:Google.GData.Client.GDataLoggingRequest.arrCRLF">
            <summary>holds carriage return/linefeed </summary>
        </member>
        <member name="M:Google.GData.Client.GDataLoggingRequest.#ctor(Google.GData.Client.GDataRequestType,System.Uri,Google.GData.Client.GDataGAuthRequestFactory,System.String,System.String,System.String)">
            <summary>default constructor</summary> 
        </member>
        <member name="M:Google.GData.Client.GDataLoggingRequest.Dispose(System.Boolean)">
            <summary>does the real disposition</summary> 
            <param name="disposing">indicates if dispose called it or finalize</param>
        </member>
        <member name="M:Google.GData.Client.GDataLoggingRequest.Execute">
            <summary>Executes the request and prepares the response stream. Also 
            does error checking</summary> 
        </member>
        <member name="M:Google.GData.Client.GDataLoggingRequest.SaveStream(System.IO.Stream,System.String)">
            <summary>private void SaveStream()</summary> 
            <param name="stream">the stream to save </param>
            <param name="targetFile">the targetFilename  to save into </param>
        </member>
        <member name="M:Google.GData.Client.GDataLoggingRequest.GetResponseStream">
            <summary>gets the readable response stream</summary> 
            <returns> the response stream</returns>
        </member>
        <member name="T:Google.GData.Client.HttpMethods">
            <summary>a simple static collection of HTTP method strings </summary> 
        </member>
        <member name="F:Google.GData.Client.HttpMethods.Delete">
            <summary>the delete method</summary> 
        </member>
        <member name="F:Google.GData.Client.HttpMethods.Post">
            <summary>the post method</summary> 
        </member>
        <member name="F:Google.GData.Client.HttpMethods.Put">
            <summary>the put method</summary> 
        </member>
        <member name="F:Google.GData.Client.HttpMethods.Get">
            <summary>the get method</summary> 
        </member>
        <member name="T:Google.GData.Client.HttpFormPost">
            <summary>a simple static collection of HTTP form post strings </summary> 
        </member>
        <member name="F:Google.GData.Client.HttpFormPost.Encoding">
            <summary>form encoding</summary> 
        </member>
        <member name="F:Google.GData.Client.HttpFormPost.ReturnContentType">
            <summary>expected return form contenttype</summary> 
        </member>
        <member name="T:Google.GData.Client.AlternativeFormat">
            <summary>enum to describe the different formats that query might return
            </summary> 
        </member>
        <member name="F:Google.GData.Client.AlternativeFormat.Atom">
            <summary>returns an atom format</summary>
        </member>
        <member name="F:Google.GData.Client.AlternativeFormat.Rss">
            <summary>returns RSS 2.0</summary>
        </member>
        <member name="F:Google.GData.Client.AlternativeFormat.OpenSearchRss">
            
            <summary>returns the Open RSS 2.0s</summary>
        </member>
        <member name="F:Google.GData.Client.AlternativeFormat.Unknown">
            <summary>parsing error</summary>
        </member>
        <member name="T:Google.GData.Client.AtomUri">
            <summary>AtomUri object representation
            </summary> 
        </member>
        <member name="M:Google.GData.Client.AtomUri.#ctor(System.Uri)">
            <summary>basic constructor for the atomUri</summary> 
        </member>
        <member name="M:Google.GData.Client.AtomUri.#ctor(System.String)">
            <summary>alternating constructor with a string</summary> 
        </member>
        <member name="M:Google.GData.Client.AtomUri.ToString">
            <summary>override for ToString</summary> 
        </member>
        <member name="M:Google.GData.Client.AtomUri.Compare(Google.GData.Client.AtomUri,Google.GData.Client.AtomUri)">
            <summary>comparison method similar to strings</summary> 
        </member>
        <member name="M:Google.GData.Client.AtomUri.GetHashCode">
            <summary>
            as we do comparisons, we need to override this
            we return the hashcode of our string member
            </summary>
            <returns>int</returns>
        </member>
        <member name="M:Google.GData.Client.AtomUri.CompareTo(System.Object)">
            <summary>
            overloaded IComparable interface method
            </summary>
            <param name="obj">the object to compare this instance with</param>
            <returns>int</returns>
        </member>
        <member name="M:Google.GData.Client.AtomUri.Equals(System.Object)">
            <summary>
            overridden equal method
            </summary>
            <param name="obj"></param>
            <returns>bool</returns>
        </member>
        <member name="M:Google.GData.Client.AtomUri.op_Equality(Google.GData.Client.AtomUri,Google.GData.Client.AtomUri)">
            <summary>
            overridden comparson operator
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns>bool</returns>
        </member>
        <member name="M:Google.GData.Client.AtomUri.op_Inequality(Google.GData.Client.AtomUri,Google.GData.Client.AtomUri)">
            <summary>
            overridden comparson operator
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns>bool</returns>
        </member>
        <member name="M:Google.GData.Client.AtomUri.op_GreaterThan(Google.GData.Client.AtomUri,Google.GData.Client.AtomUri)">
            <summary>
            overridden comparson operator
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns>bool</returns>
        </member>
        <member name="M:Google.GData.Client.AtomUri.op_LessThan(Google.GData.Client.AtomUri,Google.GData.Client.AtomUri)">
            <summary>
            overridden comparson operator
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns>bool</returns>
        </member>
        <member name="M:Google.GData.Client.AtomUri.op_GreaterThanOrEqual(Google.GData.Client.AtomUri,Google.GData.Client.AtomUri)">
            <summary>
            overridden comparson operator
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns>bool</returns>
        </member>
        <member name="M:Google.GData.Client.AtomUri.op_LessThanOrEqual(Google.GData.Client.AtomUri,Google.GData.Client.AtomUri)">
            <summary>
            overridden comparson operator
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns>bool</returns>
        </member>
        <member name="M:Google.GData.Client.AtomUri.op_Implicit(System.String)~Google.GData.Client.AtomUri">
            <summary>
            implicit new instance of AtomUri from string
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Google.GData.Client.AtomUri.op_Implicit(System.Uri)~Google.GData.Client.AtomUri">
            <summary>
            implicit new instance of AtomUri from Uri object
            </summary>
            <param name="u"></param>
            <returns></returns>
        </member>
        <member name="P:Google.GData.Client.AtomUri.Content">
            <summary>accessor method public string Content</summary> 
            <returns> </returns>
        </member>
        <member name="T:Google.GData.Client.AtomParserNameTable">
            <summary>AtomParserNameTable. An initialized nametable for faster XML processing
            parses:  4  Element Definitions
                    4.1  The "atom:feed" Element
                    4.1.1  The "version" Attribute
                    4.2  The "atom:head" Element
                    4.2.1  Usage of "atom:head" within "atom:entry"
                    4.3  The "atom:entry" Element
                    4.4  The "atom:title" Element
                    4.5  The "atom:id" Element
                    4.6  The "atom:link" Element
                    4.6.1  The "href" Attribute
                    4.6.2  The "rel" Attribute
                    4.6.3  The "type" Attribute
                    4.6.4  The "hreflang" Attribute
                    4.6.5  The "title" Attribute
                    4.6.6  The "length" Attribute
                    4.7  The "atom:updated" Element
                    4.8  The "atom:published" Element
                    4.9  The "atom:author" Element
                    4.10  The "atom:contributor" Element
                    4.12  The "atom:copyright" Element
                    4.13  The "atom:category" Element
                    4.13.1  The "term" Attribute
                    4.13.2  The "scheme" Attribute
                    4.13.3  The "label" attribute
                    4.14  The "atom:summary" Element
                    4.15  The "atom:content" Element
                    4.15.1  The "type" attribute
                    4.15.2  The "src" attribute
                    4.15.3  Processing Model
                    4.16  The "atom:introspection" Element
                    4.17  The "atom:post" Element
                    4.18  The "atom:edit" Element
                    4.20  The "atom:generator" Element
                    the atom:icon element
                    the atom:logo element
             </summary>
        </member>
        <member name="F:Google.GData.Client.AtomParserNameTable.XmlCategoryElement">
            <summary>static string for parsing</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomParserNameTable.XmlContentElement">
            <summary>static string for parsing</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomParserNameTable.XmlAtomEntryElement">
            <summary>static string for parsing</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomParserNameTable.XmlGeneratorElement">
            <summary>static string for parsing</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomParserNameTable.XmlIconElement">
            <summary>static string for parsing</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomParserNameTable.XmlLogoElement">
            <summary>static string for parsing</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomParserNameTable.XmlIdElement">
            <summary>static string for parsing</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomParserNameTable.XmlLinkElement">
            <summary>static string for parsing</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomParserNameTable.XmlFeedElement">
            <summary>static string for parsing</summary>    
        </member>
        <member name="F:Google.GData.Client.AtomParserNameTable.XmlAuthorElement">
            <summary>static string for parsing</summary>    
        </member>
        <member name="F:Google.GData.Client.AtomParserNameTable.XmlContributorElement">
            <summary>static string for parsing</summary>    
        </member>
        <member name="F:Google.GData.Client.AtomParserNameTable.XmlSourceElement">
            <summary>static string for parsing</summary>    
        </member>
        <member name="F:Google.GData.Client.AtomParserNameTable.XmlRightsElement">
            <summary>static string for parsing</summary>    
        </member>
        <member name="F:Google.GData.Client.AtomParserNameTable.XmlSubtitleElement">
            <summary>static string for parsing</summary>    
        </member>
        <member name="F:Google.GData.Client.AtomParserNameTable.XmlTitleElement">
            <summary>static string for parsing</summary>    
        </member>
        <member name="F:Google.GData.Client.AtomParserNameTable.XmlSummaryElement">
            <summary>static string for parsing</summary>    
        </member>
        <member name="F:Google.GData.Client.AtomParserNameTable.XmlUpdatedElement">
            <summary>static string for parsing</summary>    
        </member>
        <member name="F:Google.GData.Client.AtomParserNameTable.XmlEmailElement">
            <summary>static string for parsing</summary>    
        </member>
        <member name="F:Google.GData.Client.AtomParserNameTable.XmlUriElement">
            <summary>static string for parsing - same for attribute</summary>    
        </member>
        <member name="F:Google.GData.Client.AtomParserNameTable.XmlPublishedElement">
            <summary>static string for parsing - same for attribute</summary>    
        </member>
        <member name="F:Google.GData.Client.AtomParserNameTable.XmlAttributeTerm">
            <summary>static string for parsing</summary>    
        </member>
        <member name="F:Google.GData.Client.AtomParserNameTable.XmlAttributeScheme">
            <summary>static string for parsing</summary>    
        </member>
        <member name="F:Google.GData.Client.AtomParserNameTable.XmlAttributeLabel">
            <summary>static string for parsing</summary>    
        </member>
        <member name="F:Google.GData.Client.AtomParserNameTable.XmlAttributeVersion">
            <summary>static string for parsing</summary>    
        </member>
        <member name="F:Google.GData.Client.AtomParserNameTable.XmlAttributeLength">
            <summary>static string for parsing</summary>    
        </member>
        <member name="F:Google.GData.Client.AtomParserNameTable.XmlAttributeRel">
            <summary>static string for parsing</summary>    
        </member>
        <member name="F:Google.GData.Client.AtomParserNameTable.XmlAttributeHRefLang">
            <summary>static string for parsing</summary>    
        </member>
        <member name="F:Google.GData.Client.AtomParserNameTable.XmlAttributeHRef">
            <summary>static string for parsing</summary>    
        </member>
        <member name="F:Google.GData.Client.AtomParserNameTable.XmlAttributeSrc">
            <summary>static string for parsing</summary>    
        </member>
        <member name="F:Google.GData.Client.AtomParserNameTable.feed">
            <summary>atom:feed</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomParserNameTable.version">
            <summary>atom:version</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomParserNameTable.title">
            <summary>atom:title</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomParserNameTable.id">
            <summary>atom:id</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomParserNameTable.link">
            <summary>atom:link</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomParserNameTable.href">
            <summary>link attributes: href, rel, type, hreflang, title (use the defined string), length</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomParserNameTable.rel">
            <summary>property holder exposed over get/set</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomParserNameTable.hreflang">
            <summary>property holder exposed over get/set</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomParserNameTable.length">
            <summary>property holder exposed over get/set</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomParserNameTable.updated">
            <summary>atom:updated</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomParserNameTable.published">
            <summary>atom:published</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomParserNameTable.author">
            <summary>atom:author</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomParserNameTable.contributor">
            <summary>atom:contributor</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomParserNameTable.rights">
            <summary>atom:rights</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomParserNameTable.category">
            <summary>atom:category</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomParserNameTable.term">
            <summary>attributes term, scheme, label</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomParserNameTable.scheme">
            <summary>property holder exposed over get/set</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomParserNameTable.label">
            <summary>property holder exposed over get/set</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomParserNameTable.summary">
            <summary>atom:summary</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomParserNameTable.content">
            <summary>atom:content</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomParserNameTable.src">
            <summary>attributes type (use the defined string), src</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomParserNameTable.subTitle">
            <summary>atom:subtitle</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomParserNameTable.generator">
            <summary>atom:generator</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomParserNameTable.source">
            <summary>atom:source</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomParserNameTable.entry">
            <summary>atom:entry</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomParserNameTable.uri">
            <summary>property holder exposed over get/set</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomParserNameTable.email">
            <summary>property holder exposed over get/set</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomParserNameTable.icon">
            <summary>holds the icon </summary> 
        </member>
        <member name="F:Google.GData.Client.AtomParserNameTable.logo">
            <summary>holds the logo</summary> 
        </member>
        <member name="M:Google.GData.Client.AtomParserNameTable.InitAtomParserNameTable">
            <summary>initializes the name table for use with atom parsing. This is the
            only place where strings are defined for parsing</summary> 
        </member>
        <member name="P:Google.GData.Client.AtomParserNameTable.Feed">
            <summary>Read only accessor for feed</summary> 
        </member>
        <member name="P:Google.GData.Client.AtomParserNameTable.Version">
            <summary>Read only accessor for version</summary> 
        </member>
        <member name="P:Google.GData.Client.AtomParserNameTable.Source">
            <summary>Read only accessor for source</summary> 
        </member>
        <member name="P:Google.GData.Client.AtomParserNameTable.Entry">
            <summary>Read only accessor for entry</summary> 
        </member>
        <member name="P:Google.GData.Client.AtomParserNameTable.Title">
            <summary>Read only accessor for title</summary> 
        </member>
        <member name="P:Google.GData.Client.AtomParserNameTable.Link">
            <summary>Read only accessor for link</summary> 
        </member>
        <member name="P:Google.GData.Client.AtomParserNameTable.Id">
            <summary>Read only accessor for id</summary> 
        </member>
        <member name="P:Google.GData.Client.AtomParserNameTable.HRef">
            <summary>Read only accessor for href</summary> 
        </member>
        <member name="P:Google.GData.Client.AtomParserNameTable.Rel">
            <summary>Read only accessor for rel</summary> 
        </member>
        <member name="P:Google.GData.Client.AtomParserNameTable.HRefLang">
            <summary>Read only accessor for hreflang</summary> 
        </member>
        <member name="P:Google.GData.Client.AtomParserNameTable.Length">
            <summary>Read only accessor for length</summary> 
        </member>
        <member name="P:Google.GData.Client.AtomParserNameTable.Category">
            <summary>Read only accessor for category</summary> 
        </member>
        <member name="P:Google.GData.Client.AtomParserNameTable.Updated">
            <summary>Read only accessor for updated</summary> 
        </member>
        <member name="P:Google.GData.Client.AtomParserNameTable.Published">
            <summary>Read only accessor for published</summary> 
        </member>
        <member name="P:Google.GData.Client.AtomParserNameTable.Author">
            <summary>Read only accessor for author</summary> 
        </member>
        <member name="P:Google.GData.Client.AtomParserNameTable.Contributor">
            <summary>Read only accessor for contributor</summary> 
        </member>
        <member name="P:Google.GData.Client.AtomParserNameTable.Rights">
            <summary>Read only accessor for rights</summary> 
        </member>
        <member name="P:Google.GData.Client.AtomParserNameTable.Term">
            <summary>Read only accessor for term</summary> 
        </member>
        <member name="P:Google.GData.Client.AtomParserNameTable.Scheme">
            <summary>Read only accessor for scheme</summary> 
        </member>
        <member name="P:Google.GData.Client.AtomParserNameTable.Label">
            <summary>Read only accessor for label</summary> 
        </member>
        <member name="P:Google.GData.Client.AtomParserNameTable.Summary">
            <summary>Read only accessor for summary</summary> 
        </member>
        <member name="P:Google.GData.Client.AtomParserNameTable.Content">
            <summary>Read only accessor for content</summary> 
        </member>
        <member name="P:Google.GData.Client.AtomParserNameTable.Src">
            <summary>Read only accessor for src</summary> 
        </member>
        <member name="P:Google.GData.Client.AtomParserNameTable.Subtitle">
            <summary>Read only accessor for subtitle</summary> 
        </member>
        <member name="P:Google.GData.Client.AtomParserNameTable.Uri">
            <summary>Read only accessor for uri</summary> 
        </member>
        <member name="P:Google.GData.Client.AtomParserNameTable.Generator">
            <summary>Read only accessor for generator</summary> 
        </member>
        <member name="P:Google.GData.Client.AtomParserNameTable.Email">
            <summary>Read only accessor for email</summary> 
        </member>
        <member name="P:Google.GData.Client.AtomParserNameTable.Icon">
            <summary>Read only accessor for icon</summary> 
        </member>
        <member name="P:Google.GData.Client.AtomParserNameTable.Logo">
            <summary>Read only accessor for logo</summary> 
        </member>
        <member name="T:Google.GData.Client.AtomFeedParser">
            <summary>AtomFeedParser.
            </summary> 
        </member>
        <member name="F:Google.GData.Client.AtomFeedParser.nameTable">
            <summary>holds the nametable used for parsing, based on XMLNameTable</summary>
        </member>
        <member name="F:Google.GData.Client.AtomFeedParser.version">
            <summary>let's remember the feed version for parsing</summary> 
        </member>
        <member name="M:Google.GData.Client.AtomFeedParser.#ctor">
            <summary>standard empty constructor</summary> 
        </member>
        <member name="M:Google.GData.Client.AtomFeedParser.Parse(System.IO.Stream,Google.GData.Client.AtomFeed)">
            <summary>starts the parsing process</summary> 
            <param name="streamInput">input stream to parse </param>
            <param name="feed">the basefeed object that should be set</param> 
        </member>
        <member name="M:Google.GData.Client.AtomFeedParser.ParseFeed(System.Xml.XmlReader,Google.GData.Client.AtomFeed)">
            <summary>reads in the feed properties, updates the feed object, then starts
            working on the entries...</summary> 
            <param name="reader"> xmlReader positioned at the Feed element</param>
            <param name="feed">the basefeed object that should be set</param>
            <returns> notifies user using event mechanism</returns>
        </member>
        <member name="M:Google.GData.Client.AtomFeedParser.ParseSource(System.Xml.XmlReader,Google.GData.Client.AtomSource)">
            <summary>parses xml to fill a precreated AtomSource object (might be a feed)</summary> 
            <param name="reader">correctly positioned reader</param>
            <param name="source">created source object to be filled</param>
            <returns> </returns>
        </member>
        <member name="M:Google.GData.Client.AtomFeedParser.IsCurrentNameSpace(System.Xml.XmlReader,System.String)">
            <summary>checks to see if the passed in namespace is the current one</summary> 
            <param name="reader">correctly positioned xmlreader</param>
            <param name="namespaceToCompare">the namespace to test for</param> 
            <returns> true if this is the one</returns>
        </member>
        <member name="M:Google.GData.Client.AtomFeedParser.ParseBaseAttributes(System.Xml.XmlReader,Google.GData.Client.AtomBase)">
            <summary>Parses the base attributes and puts the rest in extensions.
            This needs to happen AFTER known attributes are parsed.</summary> 
            <param name="reader">correctly positioned xmlreader</param>
            <param name="baseObject">the base object to set the property on</param>
            <returns> true if an unknown attribute was found</returns>
        </member>
        <member name="M:Google.GData.Client.AtomFeedParser.ParseExtensionElements(System.Xml.XmlReader,Google.GData.Client.AtomBase)">
            <summary>parses extension elements, needs to happen when known attributes are done</summary>
            <param name="reader">correctly positioned xmlreader</param>
            <param name="baseObject">the base object to set the property on</param>
        </member>
        <member name="M:Google.GData.Client.AtomFeedParser.ParseBasicAttributes(System.Xml.XmlReader,Google.GData.Client.AtomBase)">
            <summary>nifty loop to check for base attributes for an object</summary> 
            <param name="reader">correctly positioned xmlreader</param>
            <param name="baseObject">the base object to set the property on</param>
        </member>
        <member name="M:Google.GData.Client.AtomFeedParser.ParseBaseLink(System.Xml.XmlReader,Google.GData.Client.AtomBaseLink)">
            <summary>parses a baselink object, like AtomId, AtomLogo, or AtomIcon</summary> 
            <param name="reader"> correctly positioned xmlreader</param>
            <param name="baseLink">the base object to set the property on</param> 
            <returns> </returns>
        </member>
        <member name="M:Google.GData.Client.AtomFeedParser.ParsePerson(System.Xml.XmlReader,Google.GData.Client.AtomBase)">
            <summary>parses an author/person object</summary> 
            <param name="reader"> an XmlReader positioned at the start of the author</param>
            <param name="owner">the object containing the person</param>
            <returns> the created author object</returns>
        </member>
        <member name="M:Google.GData.Client.AtomFeedParser.ParseCategory(System.Xml.XmlReader,Google.GData.Client.AtomBase)">
            <summary>parses an xml stream to create an AtomCategory object</summary> 
            <param name="reader">correctly positioned xmlreader</param>
            <param name="owner">the object containing the person</param>
            <returns> the created AtomCategory object</returns>
        </member>
        <member name="M:Google.GData.Client.AtomFeedParser.ParseLink(System.Xml.XmlReader,Google.GData.Client.AtomBase)">
            <summary>creates an atomlink object</summary> 
            <param name="reader">correctly positioned xmlreader</param>
            <param name="owner">the object containing the person</param>
            <returns> the created AtomLink object</returns>
        </member>
        <member name="M:Google.GData.Client.AtomFeedParser.ParseEntry(System.Xml.XmlReader)">
            <summary>reads one of the feed entries at a time</summary> 
            <param name="reader"> XmlReader positioned at the entry element</param>
            <returns> notifies user using event mechanism</returns>
        </member>
        <member name="M:Google.GData.Client.AtomFeedParser.ParseBatch(System.Xml.XmlReader,Google.GData.Client.AtomEntry)">
            <summary>
            parses the current position in the xml reader and fills 
            the provided GDataEntryBatch property on the entry object 
            </summary>
            <param name="reader">the xmlreader positioned at a batch element</param>
            <param name="entry">the atomentry object to fill in</param>
        </member>
        <member name="M:Google.GData.Client.AtomFeedParser.ParseOperationType(System.Xml.XmlReader)">
            <summary>
            reads the current positioned reader and creates a operationtype enum
            </summary>
            <param name="reader">XmlReader positioned at the start of the status element</param>
            <returns>GDataBatchOperationType</returns>
        </member>
        <member name="M:Google.GData.Client.AtomFeedParser.ParseBatch(System.Xml.XmlReader,Google.GData.Client.AtomFeed)">
            <summary>
            parses the current position in the xml reader and fills 
            the provided GDataFeedBatch property on the feed object
            </summary>
            <param name="reader">the xmlreader positioned at a batch element</param>
            <param name="feed">the atomfeed object to fill in</param>
        </member>
        <member name="M:Google.GData.Client.AtomFeedParser.ParseBatchStatus(System.Xml.XmlReader)">
            <summary>
            reads the current positioned reader and creates a batchstatus element
            </summary>
            <param name="reader">XmlReader positioned at the start of the status element</param>
            <returns>GDataBatchStatus</returns>
        </member>
        <member name="M:Google.GData.Client.AtomFeedParser.ParseBatchErrors(System.Xml.XmlReader)">
            <summary>
             parses a list of errors
            </summary>
            <param name="reader">XmlReader positioned at the start of the status element</param>
            <returns>GDataBatchErrorCollection</returns>
        </member>
        <member name="M:Google.GData.Client.AtomFeedParser.ParseBatchError(System.Xml.XmlReader)">
            <summary>
            parses a single error element
            </summary>
            <param name="reader">XmlReader positioned at the start of the status element</param>
            <returns>GDataBatchError</returns>
        </member>
        <member name="M:Google.GData.Client.AtomFeedParser.ParseBatchInterrupt(System.Xml.XmlReader)">
            <summary>
            parses a batchinterrupt element from a correctly positioned reader
            </summary>
            <param name="reader">XmlReader at the start of the element</param>
            <returns>GDataBatchInterrupt</returns>
        </member>
        <member name="M:Google.GData.Client.AtomFeedParser.ParseTextConstruct(System.Xml.XmlReader,Google.GData.Client.AtomBase)">
            <summary>parses an AtomTextConstruct</summary> 
            <param name="reader">the xmlreader correctly positioned at the construct </param>
            <param name="owner">the container element</param>
            <returns>the new text construct </returns>
        </member>
        <member name="M:Google.GData.Client.AtomFeedParser.ParseGenerator(System.Xml.XmlReader,Google.GData.Client.AtomBase)">
            <summary>parses an AtomGenerator</summary> 
            <param name="reader">the xmlreader correctly positioned at the generator </param>
            <param name="owner">the container element</param>
            <returns> </returns>
        </member>
        <member name="M:Google.GData.Client.AtomFeedParser.ParseContent(System.Xml.XmlReader,Google.GData.Client.AtomBase,System.Boolean@)">
            <summary>creates an AtomContent object by parsing an xml stream</summary> 
            <param name="reader">a XMLReader positioned correctly </param>
            <param name="owner">the container element</param>
            <param name="skipNode">a boolen indicating if the node needs to be skipped, or not</param>
            <returns> null or an AtomContent object</returns>
        </member>
        <member name="P:Google.GData.Client.AtomFeedParser.Version">
            <summary>accessor method public string Version</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.AtomFeedParser.Nametable">
            <summary>
            nametable for the xmlparser that the atomfeedparser uses
            </summary>
        </member>
        <member name="T:Google.GData.Client.AtomContentConverter">
            <summary>TypeConverter, so that AtomContentConverter shows up in the property pages
            </summary> 
        </member>
        <member name="M:Google.GData.Client.AtomContentConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>Standard type converter method</summary>
        </member>
        <member name="M:Google.GData.Client.AtomContentConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>Standard type converter method</summary>
        </member>
        <member name="T:Google.GData.Client.AtomContent">
            <summary>atom:content object representation
            </summary> 
        </member>
        <member name="F:Google.GData.Client.AtomContent.type">
            <summary>holds the  type attribute</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomContent.src">
            <summary>holds the src URI attribute</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomContent.content">
            <summary>holds teh content</summary> 
        </member>
        <member name="M:Google.GData.Client.AtomContent.#ctor">
            <summary>default constructor. Set's the content type to text.</summary> 
        </member>
        <member name="M:Google.GData.Client.AtomContent.ShouldBePersisted">
            <summary>figures out if this object should be persisted</summary> 
            <returns> true, if it's worth saving</returns>
        </member>
        <member name="M:Google.GData.Client.AtomContent.SaveXmlAttributes(System.Xml.XmlWriter)">
            <summary>overridden to save attributes for this(XmlWriter writer)</summary> 
            <param name="writer">the xmlwriter to save into </param>
        </member>
        <member name="M:Google.GData.Client.AtomContent.SaveInnerXml(System.Xml.XmlWriter)">
            <summary>saves the inner state of the element. Note that if the 
            content type is xhtml, no encoding will be done by this object</summary> 
            <param name="writer">the xmlWriter to save into </param>
        </member>
        <member name="P:Google.GData.Client.AtomContent.XmlName">
            <summary>Returns the constant representing this XML element.</summary> 
        </member>
        <member name="P:Google.GData.Client.AtomContent.Type">
            <summary>accessor method public string Type</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.AtomContent.Src">
            <summary>accessor method public Uri Src</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.AtomContent.AbsoluteUri">
            <summary>public Uri AbsoluteUri</summary> 
        </member>
        <member name="P:Google.GData.Client.AtomContent.Content">
            <summary>accessor method public string Content</summary> 
            <returns> </returns>
        </member>
        <member name="T:Google.GData.Client.AbstractEntry">
            <summary>
            Entry API customization class for defining entries in a custom feed
            </summary>
        </member>
        <member name="M:Google.GData.Client.AbstractEntry.AddOtherNamespaces(System.Xml.XmlWriter)">
            <summary>
            base implementation, as with the abstract feed, we are adding
            the gnamespace
            </summary>
            <param name="writer">The XmlWrite, where we want to add default namespaces to</param>
        </member>
        <member name="M:Google.GData.Client.AbstractEntry.SkipNode(System.Xml.XmlNode)">
            <summary>
            Checks if this is a namespace declaration that we already added
            </summary>
            <param name="node">XmlNode to check</param>
            <returns>True if this node should be skipped</returns>
        </member>
        <member name="M:Google.GData.Client.AbstractEntry.Parse(Google.GData.Client.ExtensionElementEventArgs,Google.GData.Client.AtomFeedParser)">
            <summary>
            Parses the inner state of the element
            </summary>
            <param name="e">The extension element that should be added to this entry</param>
            <param name="parser">The AtomFeedParser that called this</param>
        </member>
        <member name="T:Google.GData.Client.Tracing">
            <summary>Tracing helper class. Uses conditional compilation to 
             exclude tracing code in release builds</summary> 
        </member>
        <member name="M:Google.GData.Client.Tracing.#ctor">
            <summary>default constructor does nothing</summary> 
        </member>
        <member name="M:Google.GData.Client.Tracing.InitTracing">
            <summary>default initializer, does nothing right now</summary> 
        </member>
        <member name="M:Google.GData.Client.Tracing.ExitTracing">
            <summary>Default deinitializer, closes the listener streams</summary> 
        </member>
        <member name="M:Google.GData.Client.Tracing.TraceCall(System.String,System.Diagnostics.StackFrame,System.Int32)">
            <summary>Method to trace the current call with an additional message</summary> 
            <param name="msg"> msg string to display</param>
            <param name="startFrame">the startFrame to uses</param>
            <param name="indent"> intendation</param>
        </member>
        <member name="M:Google.GData.Client.Tracing.TraceCall(System.String)">
            <summary>Method to trace the current call with an additional message</summary> 
            <param name="msg"> msg string to display</param>
        </member>
        <member name="M:Google.GData.Client.Tracing.TraceCall">
            <summary>Method to trace the current call with an additional message</summary> 
        </member>
        <member name="M:Google.GData.Client.Tracing.TraceInfo(System.String)">
            <summary>Method to trace the current call with an additional message</summary> 
            <param name="msg"> msg string to display</param>
        </member>
        <member name="M:Google.GData.Client.Tracing.TraceMsg(System.String)">
            <summary>Method to trace a message</summary> 
            <param name="msg"> msg string to display</param>
        </member>
        <member name="M:Google.GData.Client.Tracing.Assert(System.Boolean,System.String)">
            <summary>Method to assert + trace a message</summary> 
            <param name="condition"> if false, raises assert</param>
            <param name="msg"> msg string to display</param>
        </member>
        <member name="T:Google.GData.Client.AtomGeneratorConverter">
            <summary>TypeConverter, so that AtomGenerator shows up in the property pages
            </summary> 
        </member>
        <member name="M:Google.GData.Client.AtomGeneratorConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>Standard type converter method</summary>
        </member>
        <member name="M:Google.GData.Client.AtomGeneratorConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>Standard type converter method</summary>
        </member>
        <member name="T:Google.GData.Client.AtomGenerator">
            <summary>Represents the Generator element /feed/generator in Atom. In RSS, only the name property is used.
            </summary> 
        </member>
        <member name="F:Google.GData.Client.AtomGenerator.text">
            <summary>text part of the Generator element</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomGenerator.uri">
            <summary>Uri attribute of the Generator element</summary> 
        </member>
        <member name="F:Google.GData.Client.AtomGenerator.version">
            <summary>version attribute of the Generator element</summary> 
        </member>
        <member name="M:Google.GData.Client.AtomGenerator.#ctor">
            <summary>standard constructor, not used right now
            atomGenerator = element atom:generator {
               atomCommonAttributes,
               attribute url { atomUri }?,
               attribute version { text }?,
               text
            }
            </summary> 
        </member>
        <member name="M:Google.GData.Client.AtomGenerator.#ctor(System.String)">
            <summary>public AtomGenerator(string text)</summary> 
            <param name="text">the human readable representation of the generator</param>
        </member>
        <member name="M:Google.GData.Client.AtomGenerator.SaveXmlAttributes(System.Xml.XmlWriter)">
            <summary>overridden to save attributes for this(XmlWriter writer)</summary> 
            <param name="writer">the xmlwriter to save into </param>
        </member>
        <member name="M:Google.GData.Client.AtomGenerator.SaveInnerXml(System.Xml.XmlWriter)">
            <summary>saves the inner state of the element</summary> 
            <param name="writer">the xmlWriter to save into </param>
        </member>
        <member name="M:Google.GData.Client.AtomGenerator.ShouldBePersisted">
            <summary>figures out if this object should be persisted</summary> 
            <returns> true, if it's worth saving</returns>
        </member>
        <member name="P:Google.GData.Client.AtomGenerator.XmlName">
            <summary>Returns the constant representing this XML element.</summary> 
        </member>
        <member name="P:Google.GData.Client.AtomGenerator.Text">
            <summary>accessor method public string Text</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.AtomGenerator.Uri">
            <summary>accessor method public Uri Uri</summary> 
            <returns> </returns>
        </member>
        <member name="P:Google.GData.Client.AtomGenerator.Version">
            <summary>accessor method public string Version</summary> 
            <returns> </returns>
        </member>
        <member name="T:Google.GData.Client.BaseIsDirty">
            <summary>Helper object to walk the tree for the dirty flag.</summary> 
        </member>
        <member name="M:Google.GData.Client.BaseIsDirty.Go(Google.GData.Client.AtomBase)">
            <summary>Walker action. Just gets a property.</summary> 
            <param name="atom">object to set the property on</param>
            <returns>the value of the dirty flag</returns>
        </member>
        <member name="T:Google.GData.Client.BaseMarkDirty">
            <summary>Helper object to walk the tree for the dirty flag.</summary> 
        </member>
        <member name="F:Google.GData.Client.BaseMarkDirty.flag">
            <summary>Holds if set/unset to dirty.</summary> 
        </member>
        <member name="M:Google.GData.Client.BaseMarkDirty.#ctor(System.Boolean)">
            <summary>Constructor.</summary> 
            <param name="flag">indicates the value to pass </param>
        </member>
        <member name="M:Google.GData.Client.BaseMarkDirty.Go(Google.GData.Client.AtomBase)">
            <summary>Walker action. Just sets a property.</summary> 
            <param name="atom">object to set the property on </param>
            <returns> always false, indicating to walk the whole tree</returns>
        </member>
        <member name="T:Google.GData.Client.BaseIsPersistable">
            <summary>Helper class, mainly used to walk the tree for the dirty flag.</summary> 
        </member>
        <member name="M:Google.GData.Client.BaseIsPersistable.Go(Google.GData.Client.AtomBase)">
            <summary>Walker action. Just gets a property.</summary> 
            <param name="atom">object to set the property on </param>
            <returns>returns the value of the ShouldBePersisted() of the object</returns>
        </member>
    </members>
</doc>
